# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'address_type': 'str',
        'address': 'str',
        'address_city': 'str',
        'address_country': 'str',
        'address_delivery_point': 'str',
        'address_postal_code': 'str',
        'address_state': 'str',
        'contact_email': 'str',
        'contact_voice': 'str',
        'contact_facsimile': 'str',
        'contact_organization': 'str',
        'contact_person': 'str',
        'contact_position': 'str',
        'online_resource': 'str'
    }

    attribute_map = {
        'id': 'id',
        'address_type': 'addressType',
        'address': 'address',
        'address_city': 'addressCity',
        'address_country': 'addressCountry',
        'address_delivery_point': 'addressDeliveryPoint',
        'address_postal_code': 'addressPostalCode',
        'address_state': 'addressState',
        'contact_email': 'contactEmail',
        'contact_voice': 'contactVoice',
        'contact_facsimile': 'contactFacsimile',
        'contact_organization': 'contactOrganization',
        'contact_person': 'contactPerson',
        'contact_position': 'contactPosition',
        'online_resource': 'onlineResource'
    }

    def __init__(self, id=None, address_type=None, address=None, address_city=None, address_country=None, address_delivery_point=None, address_postal_code=None, address_state=None, contact_email=None, contact_voice=None, contact_facsimile=None, contact_organization=None, contact_person=None, contact_position=None, online_resource=None):  # noqa: E501
        """ContactInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._address_type = None
        self._address = None
        self._address_city = None
        self._address_country = None
        self._address_delivery_point = None
        self._address_postal_code = None
        self._address_state = None
        self._contact_email = None
        self._contact_voice = None
        self._contact_facsimile = None
        self._contact_organization = None
        self._contact_person = None
        self._contact_position = None
        self._online_resource = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if address_type is not None:
            self.address_type = address_type
        if address is not None:
            self.address = address
        if address_city is not None:
            self.address_city = address_city
        if address_country is not None:
            self.address_country = address_country
        if address_delivery_point is not None:
            self.address_delivery_point = address_delivery_point
        if address_postal_code is not None:
            self.address_postal_code = address_postal_code
        if address_state is not None:
            self.address_state = address_state
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_voice is not None:
            self.contact_voice = contact_voice
        if contact_facsimile is not None:
            self.contact_facsimile = contact_facsimile
        if contact_organization is not None:
            self.contact_organization = contact_organization
        if contact_person is not None:
            self.contact_person = contact_person
        if contact_position is not None:
            self.contact_position = contact_position
        if online_resource is not None:
            self.online_resource = online_resource

    @property
    def id(self):
        """Gets the id of this ContactInfo.  # noqa: E501

        Object identifier  # noqa: E501

        :return: The id of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactInfo.

        Object identifier  # noqa: E501

        :param id: The id of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def address_type(self):
        """Gets the address_type of this ContactInfo.  # noqa: E501

        Type of address  # noqa: E501

        :return: The address_type of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this ContactInfo.

        Type of address  # noqa: E501

        :param address_type: The address_type of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._address_type = address_type

    @property
    def address(self):
        """Gets the address of this ContactInfo.  # noqa: E501

        Server admin address  # noqa: E501

        :return: The address of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactInfo.

        Server admin address  # noqa: E501

        :param address: The address of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_city(self):
        """Gets the address_city of this ContactInfo.  # noqa: E501

        Server admin city  # noqa: E501

        :return: The address_city of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this ContactInfo.

        Server admin city  # noqa: E501

        :param address_city: The address_city of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._address_city = address_city

    @property
    def address_country(self):
        """Gets the address_country of this ContactInfo.  # noqa: E501

        Server admin country  # noqa: E501

        :return: The address_country of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this ContactInfo.

        Server admin country  # noqa: E501

        :param address_country: The address_country of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._address_country = address_country

    @property
    def address_delivery_point(self):
        """Gets the address_delivery_point of this ContactInfo.  # noqa: E501


        :return: The address_delivery_point of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._address_delivery_point

    @address_delivery_point.setter
    def address_delivery_point(self, address_delivery_point):
        """Sets the address_delivery_point of this ContactInfo.


        :param address_delivery_point: The address_delivery_point of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._address_delivery_point = address_delivery_point

    @property
    def address_postal_code(self):
        """Gets the address_postal_code of this ContactInfo.  # noqa: E501


        :return: The address_postal_code of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._address_postal_code

    @address_postal_code.setter
    def address_postal_code(self, address_postal_code):
        """Sets the address_postal_code of this ContactInfo.


        :param address_postal_code: The address_postal_code of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._address_postal_code = address_postal_code

    @property
    def address_state(self):
        """Gets the address_state of this ContactInfo.  # noqa: E501


        :return: The address_state of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this ContactInfo.


        :param address_state: The address_state of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._address_state = address_state

    @property
    def contact_email(self):
        """Gets the contact_email of this ContactInfo.  # noqa: E501

        Server admin email  # noqa: E501

        :return: The contact_email of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this ContactInfo.

        Server admin email  # noqa: E501

        :param contact_email: The contact_email of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_voice(self):
        """Gets the contact_voice of this ContactInfo.  # noqa: E501

        Server admin phone number  # noqa: E501

        :return: The contact_voice of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._contact_voice

    @contact_voice.setter
    def contact_voice(self, contact_voice):
        """Sets the contact_voice of this ContactInfo.

        Server admin phone number  # noqa: E501

        :param contact_voice: The contact_voice of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._contact_voice = contact_voice

    @property
    def contact_facsimile(self):
        """Gets the contact_facsimile of this ContactInfo.  # noqa: E501

        Server admin facsimile number  # noqa: E501

        :return: The contact_facsimile of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._contact_facsimile

    @contact_facsimile.setter
    def contact_facsimile(self, contact_facsimile):
        """Sets the contact_facsimile of this ContactInfo.

        Server admin facsimile number  # noqa: E501

        :param contact_facsimile: The contact_facsimile of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._contact_facsimile = contact_facsimile

    @property
    def contact_organization(self):
        """Gets the contact_organization of this ContactInfo.  # noqa: E501

        Server admin organization  # noqa: E501

        :return: The contact_organization of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._contact_organization

    @contact_organization.setter
    def contact_organization(self, contact_organization):
        """Sets the contact_organization of this ContactInfo.

        Server admin organization  # noqa: E501

        :param contact_organization: The contact_organization of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._contact_organization = contact_organization

    @property
    def contact_person(self):
        """Gets the contact_person of this ContactInfo.  # noqa: E501

        Server admin point of contact  # noqa: E501

        :return: The contact_person of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this ContactInfo.

        Server admin point of contact  # noqa: E501

        :param contact_person: The contact_person of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def contact_position(self):
        """Gets the contact_position of this ContactInfo.  # noqa: E501

        Server admin point of contact job title  # noqa: E501

        :return: The contact_position of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._contact_position

    @contact_position.setter
    def contact_position(self, contact_position):
        """Sets the contact_position of this ContactInfo.

        Server admin point of contact job title  # noqa: E501

        :param contact_position: The contact_position of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._contact_position = contact_position

    @property
    def online_resource(self):
        """Gets the online_resource of this ContactInfo.  # noqa: E501

        Concat web URL  # noqa: E501

        :return: The online_resource of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._online_resource

    @online_resource.setter
    def online_resource(self, online_resource):
        """Sets the online_resource of this ContactInfo.

        Concat web URL  # noqa: E501

        :param online_resource: The online_resource of this ContactInfo.  # noqa: E501
        :type: str
        """

        self._online_resource = online_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
