# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from geoserver.models.published_info import PublishedInfo  # noqa: F401,E501

class LayerInfo(PublishedInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'default_style': 'StyleInfo',
        'styles': 'list[StyleInfo]',
        'resource': 'ResourceInfo',
        'legend': 'LegendInfo',
        'enabled': 'bool',
        'queryable': 'bool',
        'opaque': 'bool',
        'advertised': 'bool',
        'default_wms_interpolation_method': 'WMSInterpolation'
    }
    if hasattr(PublishedInfo, "swagger_types"):
        swagger_types.update(PublishedInfo.swagger_types)

    attribute_map = {
        'path': 'path',
        'default_style': 'defaultStyle',
        'styles': 'styles',
        'resource': 'resource',
        'legend': 'legend',
        'enabled': 'enabled',
        'queryable': 'queryable',
        'opaque': 'opaque',
        'advertised': 'advertised',
        'default_wms_interpolation_method': 'defaultWMSInterpolationMethod'
    }
    if hasattr(PublishedInfo, "attribute_map"):
        attribute_map.update(PublishedInfo.attribute_map)

    def __init__(self, path=None, default_style=None, styles=None, resource=None, legend=None, enabled=None, queryable=None, opaque=None, advertised=True, default_wms_interpolation_method=None, *args, **kwargs):  # noqa: E501
        """LayerInfo - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._default_style = None
        self._styles = None
        self._resource = None
        self._legend = None
        self._enabled = None
        self._queryable = None
        self._opaque = None
        self._advertised = None
        self._default_wms_interpolation_method = None
        self.discriminator = None
        if path is not None:
            self.path = path
        if default_style is not None:
            self.default_style = default_style
        if styles is not None:
            self.styles = styles
        if resource is not None:
            self.resource = resource
        if legend is not None:
            self.legend = legend
        if enabled is not None:
            self.enabled = enabled
        if queryable is not None:
            self.queryable = queryable
        if opaque is not None:
            self.opaque = opaque
        if advertised is not None:
            self.advertised = advertised
        if default_wms_interpolation_method is not None:
            self.default_wms_interpolation_method = default_wms_interpolation_method
        PublishedInfo.__init__(self, *args, **kwargs)

    @property
    def path(self):
        """Gets the path of this LayerInfo.  # noqa: E501


        :return: The path of this LayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LayerInfo.


        :param path: The path of this LayerInfo.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def default_style(self):
        """Gets the default_style of this LayerInfo.  # noqa: E501


        :return: The default_style of this LayerInfo.  # noqa: E501
        :rtype: StyleInfo
        """
        return self._default_style

    @default_style.setter
    def default_style(self, default_style):
        """Sets the default_style of this LayerInfo.


        :param default_style: The default_style of this LayerInfo.  # noqa: E501
        :type: StyleInfo
        """

        self._default_style = default_style

    @property
    def styles(self):
        """Gets the styles of this LayerInfo.  # noqa: E501


        :return: The styles of this LayerInfo.  # noqa: E501
        :rtype: list[StyleInfo]
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this LayerInfo.


        :param styles: The styles of this LayerInfo.  # noqa: E501
        :type: list[StyleInfo]
        """

        self._styles = styles

    @property
    def resource(self):
        """Gets the resource of this LayerInfo.  # noqa: E501


        :return: The resource of this LayerInfo.  # noqa: E501
        :rtype: ResourceInfo
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this LayerInfo.


        :param resource: The resource of this LayerInfo.  # noqa: E501
        :type: ResourceInfo
        """

        self._resource = resource

    @property
    def legend(self):
        """Gets the legend of this LayerInfo.  # noqa: E501


        :return: The legend of this LayerInfo.  # noqa: E501
        :rtype: LegendInfo
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this LayerInfo.


        :param legend: The legend of this LayerInfo.  # noqa: E501
        :type: LegendInfo
        """

        self._legend = legend

    @property
    def enabled(self):
        """Gets the enabled of this LayerInfo.  # noqa: E501


        :return: The enabled of this LayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LayerInfo.


        :param enabled: The enabled of this LayerInfo.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def queryable(self):
        """Gets the queryable of this LayerInfo.  # noqa: E501


        :return: The queryable of this LayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._queryable

    @queryable.setter
    def queryable(self, queryable):
        """Sets the queryable of this LayerInfo.


        :param queryable: The queryable of this LayerInfo.  # noqa: E501
        :type: bool
        """

        self._queryable = queryable

    @property
    def opaque(self):
        """Gets the opaque of this LayerInfo.  # noqa: E501


        :return: The opaque of this LayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._opaque

    @opaque.setter
    def opaque(self, opaque):
        """Sets the opaque of this LayerInfo.


        :param opaque: The opaque of this LayerInfo.  # noqa: E501
        :type: bool
        """

        self._opaque = opaque

    @property
    def advertised(self):
        """Gets the advertised of this LayerInfo.  # noqa: E501


        :return: The advertised of this LayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._advertised

    @advertised.setter
    def advertised(self, advertised):
        """Sets the advertised of this LayerInfo.


        :param advertised: The advertised of this LayerInfo.  # noqa: E501
        :type: bool
        """

        self._advertised = advertised

    @property
    def default_wms_interpolation_method(self):
        """Gets the default_wms_interpolation_method of this LayerInfo.  # noqa: E501


        :return: The default_wms_interpolation_method of this LayerInfo.  # noqa: E501
        :rtype: WMSInterpolation
        """
        return self._default_wms_interpolation_method

    @default_wms_interpolation_method.setter
    def default_wms_interpolation_method(self, default_wms_interpolation_method):
        """Sets the default_wms_interpolation_method of this LayerInfo.


        :param default_wms_interpolation_method: The default_wms_interpolation_method of this LayerInfo.  # noqa: E501
        :type: WMSInterpolation
        """

        self._default_wms_interpolation_method = default_wms_interpolation_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
