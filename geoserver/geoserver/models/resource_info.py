# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'native_name': 'str',
        'namespace': 'NamespaceInfo',
        'title': 'str',
        'abstract': 'str',
        'description': 'str',
        'enabled': 'bool',
        'alias': 'list[str]',
        'data_links': 'list[DataLinkInfo]',
        'disabled_services': 'list[str]',
        'keywords': 'list[KeywordInfo]',
        'lat_lon_bounding_box': 'EnvelopeInfo',
        'native_bounding_box': 'EnvelopeInfo',
        'metadatalinks': 'list[MetadataLinkInfo]',
        'native_crs': 'str',
        'srs': 'str',
        'projection_policy': 'ProjectionPolicy',
        'advertised': 'bool',
        'service_configuration': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'native_name': 'nativeName',
        'namespace': 'namespace',
        'title': 'title',
        'abstract': 'abstract',
        'description': 'description',
        'enabled': 'enabled',
        'alias': 'alias',
        'data_links': 'dataLinks',
        'disabled_services': 'disabledServices',
        'keywords': 'keywords',
        'lat_lon_bounding_box': 'latLonBoundingBox',
        'native_bounding_box': 'nativeBoundingBox',
        'metadatalinks': 'metadatalinks',
        'native_crs': 'nativeCRS',
        'srs': 'srs',
        'projection_policy': 'projectionPolicy',
        'advertised': 'advertised',
        'service_configuration': 'serviceConfiguration'
    }

    def __init__(self, name=None, native_name=None, namespace=None, title=None, abstract=None, description=None, enabled=None, alias=None, data_links=None, disabled_services=None, keywords=None, lat_lon_bounding_box=None, native_bounding_box=None, metadatalinks=None, native_crs=None, srs=None, projection_policy=None, advertised=None, service_configuration=None):  # noqa: E501
        """ResourceInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._native_name = None
        self._namespace = None
        self._title = None
        self._abstract = None
        self._description = None
        self._enabled = None
        self._alias = None
        self._data_links = None
        self._disabled_services = None
        self._keywords = None
        self._lat_lon_bounding_box = None
        self._native_bounding_box = None
        self._metadatalinks = None
        self._native_crs = None
        self._srs = None
        self._projection_policy = None
        self._advertised = None
        self._service_configuration = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.native_name = native_name
        if namespace is not None:
            self.namespace = namespace
        if title is not None:
            self.title = title
        if abstract is not None:
            self.abstract = abstract
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if alias is not None:
            self.alias = alias
        if data_links is not None:
            self.data_links = data_links
        if disabled_services is not None:
            self.disabled_services = disabled_services
        if keywords is not None:
            self.keywords = keywords
        if lat_lon_bounding_box is not None:
            self.lat_lon_bounding_box = lat_lon_bounding_box
        if native_bounding_box is not None:
            self.native_bounding_box = native_bounding_box
        if metadatalinks is not None:
            self.metadatalinks = metadatalinks
        if native_crs is not None:
            self.native_crs = native_crs
        if srs is not None:
            self.srs = srs
        if projection_policy is not None:
            self.projection_policy = projection_policy
        if advertised is not None:
            self.advertised = advertised
        if service_configuration is not None:
            self.service_configuration = service_configuration

    @property
    def name(self):
        """Gets the name of this ResourceInfo.  # noqa: E501

        The name of the resource. This name corresponds to the \"published\" name of the resource.  # noqa: E501

        :return: The name of this ResourceInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceInfo.

        The name of the resource. This name corresponds to the \"published\" name of the resource.  # noqa: E501

        :param name: The name of this ResourceInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def native_name(self):
        """Gets the native_name of this ResourceInfo.  # noqa: E501

        The native name of the resource. This name corresponds to the physical resource that feature type is derived from -- a shapefile name, a database table, etc...  # noqa: E501

        :return: The native_name of this ResourceInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_name

    @native_name.setter
    def native_name(self, native_name):
        """Sets the native_name of this ResourceInfo.

        The native name of the resource. This name corresponds to the physical resource that feature type is derived from -- a shapefile name, a database table, etc...  # noqa: E501

        :param native_name: The native_name of this ResourceInfo.  # noqa: E501
        :type: str
        """
        if native_name is None:
            raise ValueError("Invalid value for `native_name`, must not be `None`")  # noqa: E501

        self._native_name = native_name

    @property
    def namespace(self):
        """Gets the namespace of this ResourceInfo.  # noqa: E501


        :return: The namespace of this ResourceInfo.  # noqa: E501
        :rtype: NamespaceInfo
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ResourceInfo.


        :param namespace: The namespace of this ResourceInfo.  # noqa: E501
        :type: NamespaceInfo
        """

        self._namespace = namespace

    @property
    def title(self):
        """Gets the title of this ResourceInfo.  # noqa: E501

        The title of the resource.  # noqa: E501

        :return: The title of this ResourceInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ResourceInfo.

        The title of the resource.  # noqa: E501

        :param title: The title of this ResourceInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this ResourceInfo.  # noqa: E501

        the abstract for the resource.  # noqa: E501

        :return: The abstract of this ResourceInfo.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this ResourceInfo.

        the abstract for the resource.  # noqa: E501

        :param abstract: The abstract of this ResourceInfo.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def description(self):
        """Gets the description of this ResourceInfo.  # noqa: E501

        A description of the resource. This is usually something that is to be displayed in a user interface.  # noqa: E501

        :return: The description of this ResourceInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourceInfo.

        A description of the resource. This is usually something that is to be displayed in a user interface.  # noqa: E501

        :param description: The description of this ResourceInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this ResourceInfo.  # noqa: E501

        A flag indicating if the resource is enabled or not.  # noqa: E501

        :return: The enabled of this ResourceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ResourceInfo.

        A flag indicating if the resource is enabled or not.  # noqa: E501

        :param enabled: The enabled of this ResourceInfo.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def alias(self):
        """Gets the alias of this ResourceInfo.  # noqa: E501

        A set of aliases or alternative names that the resource is also known by.  # noqa: E501

        :return: The alias of this ResourceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ResourceInfo.

        A set of aliases or alternative names that the resource is also known by.  # noqa: E501

        :param alias: The alias of this ResourceInfo.  # noqa: E501
        :type: list[str]
        """

        self._alias = alias

    @property
    def data_links(self):
        """Gets the data_links of this ResourceInfo.  # noqa: E501

        A collection of data links for the resource.  # noqa: E501

        :return: The data_links of this ResourceInfo.  # noqa: E501
        :rtype: list[DataLinkInfo]
        """
        return self._data_links

    @data_links.setter
    def data_links(self, data_links):
        """Sets the data_links of this ResourceInfo.

        A collection of data links for the resource.  # noqa: E501

        :param data_links: The data_links of this ResourceInfo.  # noqa: E501
        :type: list[DataLinkInfo]
        """

        self._data_links = data_links

    @property
    def disabled_services(self):
        """Gets the disabled_services of this ResourceInfo.  # noqa: E501

        a list of disabled services names for this resource (e.g. [WMS, WCS])  # noqa: E501

        :return: The disabled_services of this ResourceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_services

    @disabled_services.setter
    def disabled_services(self, disabled_services):
        """Sets the disabled_services of this ResourceInfo.

        a list of disabled services names for this resource (e.g. [WMS, WCS])  # noqa: E501

        :param disabled_services: The disabled_services of this ResourceInfo.  # noqa: E501
        :type: list[str]
        """

        self._disabled_services = disabled_services

    @property
    def keywords(self):
        """Gets the keywords of this ResourceInfo.  # noqa: E501

        A collection of keywords associated with the resource.  # noqa: E501

        :return: The keywords of this ResourceInfo.  # noqa: E501
        :rtype: list[KeywordInfo]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ResourceInfo.

        A collection of keywords associated with the resource.  # noqa: E501

        :param keywords: The keywords of this ResourceInfo.  # noqa: E501
        :type: list[KeywordInfo]
        """

        self._keywords = keywords

    @property
    def lat_lon_bounding_box(self):
        """Gets the lat_lon_bounding_box of this ResourceInfo.  # noqa: E501


        :return: The lat_lon_bounding_box of this ResourceInfo.  # noqa: E501
        :rtype: EnvelopeInfo
        """
        return self._lat_lon_bounding_box

    @lat_lon_bounding_box.setter
    def lat_lon_bounding_box(self, lat_lon_bounding_box):
        """Sets the lat_lon_bounding_box of this ResourceInfo.


        :param lat_lon_bounding_box: The lat_lon_bounding_box of this ResourceInfo.  # noqa: E501
        :type: EnvelopeInfo
        """

        self._lat_lon_bounding_box = lat_lon_bounding_box

    @property
    def native_bounding_box(self):
        """Gets the native_bounding_box of this ResourceInfo.  # noqa: E501


        :return: The native_bounding_box of this ResourceInfo.  # noqa: E501
        :rtype: EnvelopeInfo
        """
        return self._native_bounding_box

    @native_bounding_box.setter
    def native_bounding_box(self, native_bounding_box):
        """Sets the native_bounding_box of this ResourceInfo.


        :param native_bounding_box: The native_bounding_box of this ResourceInfo.  # noqa: E501
        :type: EnvelopeInfo
        """

        self._native_bounding_box = native_bounding_box

    @property
    def metadatalinks(self):
        """Gets the metadatalinks of this ResourceInfo.  # noqa: E501


        :return: The metadatalinks of this ResourceInfo.  # noqa: E501
        :rtype: list[MetadataLinkInfo]
        """
        return self._metadatalinks

    @metadatalinks.setter
    def metadatalinks(self, metadatalinks):
        """Sets the metadatalinks of this ResourceInfo.


        :param metadatalinks: The metadatalinks of this ResourceInfo.  # noqa: E501
        :type: list[MetadataLinkInfo]
        """

        self._metadatalinks = metadatalinks

    @property
    def native_crs(self):
        """Gets the native_crs of this ResourceInfo.  # noqa: E501

        The native coordinate reference system object of the resource, in WKT format  # noqa: E501

        :return: The native_crs of this ResourceInfo.  # noqa: E501
        :rtype: str
        """
        return self._native_crs

    @native_crs.setter
    def native_crs(self, native_crs):
        """Sets the native_crs of this ResourceInfo.

        The native coordinate reference system object of the resource, in WKT format  # noqa: E501

        :param native_crs: The native_crs of this ResourceInfo.  # noqa: E501
        :type: str
        """

        self._native_crs = native_crs

    @property
    def srs(self):
        """Gets the srs of this ResourceInfo.  # noqa: E501

        Returns the identifier of coordinate reference system of the resource.  # noqa: E501

        :return: The srs of this ResourceInfo.  # noqa: E501
        :rtype: str
        """
        return self._srs

    @srs.setter
    def srs(self, srs):
        """Sets the srs of this ResourceInfo.

        Returns the identifier of coordinate reference system of the resource.  # noqa: E501

        :param srs: The srs of this ResourceInfo.  # noqa: E501
        :type: str
        """

        self._srs = srs

    @property
    def projection_policy(self):
        """Gets the projection_policy of this ResourceInfo.  # noqa: E501


        :return: The projection_policy of this ResourceInfo.  # noqa: E501
        :rtype: ProjectionPolicy
        """
        return self._projection_policy

    @projection_policy.setter
    def projection_policy(self, projection_policy):
        """Sets the projection_policy of this ResourceInfo.


        :param projection_policy: The projection_policy of this ResourceInfo.  # noqa: E501
        :type: ProjectionPolicy
        """

        self._projection_policy = projection_policy

    @property
    def advertised(self):
        """Gets the advertised of this ResourceInfo.  # noqa: E501

        true if the resource existence should be advertised (true by default, unless otherwise set)  # noqa: E501

        :return: The advertised of this ResourceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._advertised

    @advertised.setter
    def advertised(self, advertised):
        """Sets the advertised of this ResourceInfo.

        true if the resource existence should be advertised (true by default, unless otherwise set)  # noqa: E501

        :param advertised: The advertised of this ResourceInfo.  # noqa: E501
        :type: bool
        """

        self._advertised = advertised

    @property
    def service_configuration(self):
        """Gets the service_configuration of this ResourceInfo.  # noqa: E501

        true if the resource will configure services access, false otherwise  # noqa: E501

        :return: The service_configuration of this ResourceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._service_configuration

    @service_configuration.setter
    def service_configuration(self, service_configuration):
        """Sets the service_configuration of this ResourceInfo.

        true if the resource will configure services access, false otherwise  # noqa: E501

        :param service_configuration: The service_configuration of this ResourceInfo.  # noqa: E501
        :type: bool
        """

        self._service_configuration = service_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
