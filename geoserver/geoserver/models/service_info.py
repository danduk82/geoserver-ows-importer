# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workspace': 'CatalogYamlcomponentsschemasWorkspaceInfo',
        'enabled': 'bool',
        'name': 'str',
        'title': 'str',
        'abstrct': 'str',
        'maintainer': 'str',
        'access_constraints': 'str',
        'fees': 'str',
        'exception_formats': 'list[str]',
        'cite_compliant': 'bool',
        'online_resource': 'str',
        'schema_base_url': 'str',
        'output_strategy': 'str',
        'verbose': 'bool'
    }

    attribute_map = {
        'workspace': 'workspace',
        'enabled': 'enabled',
        'name': 'name',
        'title': 'title',
        'abstrct': 'abstrct',
        'maintainer': 'maintainer',
        'access_constraints': 'accessConstraints',
        'fees': 'fees',
        'exception_formats': 'exceptionFormats',
        'cite_compliant': 'citeCompliant',
        'online_resource': 'onlineResource',
        'schema_base_url': 'schemaBaseURL',
        'output_strategy': 'outputStrategy',
        'verbose': 'verbose'
    }

    def __init__(self, workspace=None, enabled=None, name=None, title=None, abstrct=None, maintainer=None, access_constraints=None, fees=None, exception_formats=None, cite_compliant=None, online_resource=None, schema_base_url=None, output_strategy=None, verbose=None):  # noqa: E501
        """ServiceInfo - a model defined in Swagger"""  # noqa: E501
        self._workspace = None
        self._enabled = None
        self._name = None
        self._title = None
        self._abstrct = None
        self._maintainer = None
        self._access_constraints = None
        self._fees = None
        self._exception_formats = None
        self._cite_compliant = None
        self._online_resource = None
        self._schema_base_url = None
        self._output_strategy = None
        self._verbose = None
        self.discriminator = None
        if workspace is not None:
            self.workspace = workspace
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if abstrct is not None:
            self.abstrct = abstrct
        if maintainer is not None:
            self.maintainer = maintainer
        if access_constraints is not None:
            self.access_constraints = access_constraints
        if fees is not None:
            self.fees = fees
        if exception_formats is not None:
            self.exception_formats = exception_formats
        if cite_compliant is not None:
            self.cite_compliant = cite_compliant
        if online_resource is not None:
            self.online_resource = online_resource
        if schema_base_url is not None:
            self.schema_base_url = schema_base_url
        if output_strategy is not None:
            self.output_strategy = output_strategy
        if verbose is not None:
            self.verbose = verbose

    @property
    def workspace(self):
        """Gets the workspace of this ServiceInfo.  # noqa: E501


        :return: The workspace of this ServiceInfo.  # noqa: E501
        :rtype: CatalogYamlcomponentsschemasWorkspaceInfo
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ServiceInfo.


        :param workspace: The workspace of this ServiceInfo.  # noqa: E501
        :type: CatalogYamlcomponentsschemasWorkspaceInfo
        """

        self._workspace = workspace

    @property
    def enabled(self):
        """Gets the enabled of this ServiceInfo.  # noqa: E501

        Status of the service  # noqa: E501

        :return: The enabled of this ServiceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ServiceInfo.

        Status of the service  # noqa: E501

        :param enabled: The enabled of this ServiceInfo.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this ServiceInfo.  # noqa: E501

        Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.  # noqa: E501

        :return: The name of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceInfo.

        Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.  # noqa: E501

        :param name: The name of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this ServiceInfo.  # noqa: E501

        Title of the service  # noqa: E501

        :return: The title of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ServiceInfo.

        Title of the service  # noqa: E501

        :param title: The title of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def abstrct(self):
        """Gets the abstrct of this ServiceInfo.  # noqa: E501

        description of the service  # noqa: E501

        :return: The abstrct of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._abstrct

    @abstrct.setter
    def abstrct(self, abstrct):
        """Sets the abstrct of this ServiceInfo.

        description of the service  # noqa: E501

        :param abstrct: The abstrct of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._abstrct = abstrct

    @property
    def maintainer(self):
        """Gets the maintainer of this ServiceInfo.  # noqa: E501

        maintainer of the service  # noqa: E501

        :return: The maintainer of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this ServiceInfo.

        maintainer of the service  # noqa: E501

        :param maintainer: The maintainer of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._maintainer = maintainer

    @property
    def access_constraints(self):
        """Gets the access_constraints of this ServiceInfo.  # noqa: E501


        :return: The access_constraints of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._access_constraints

    @access_constraints.setter
    def access_constraints(self, access_constraints):
        """Sets the access_constraints of this ServiceInfo.


        :param access_constraints: The access_constraints of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._access_constraints = access_constraints

    @property
    def fees(self):
        """Gets the fees of this ServiceInfo.  # noqa: E501


        :return: The fees of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this ServiceInfo.


        :param fees: The fees of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._fees = fees

    @property
    def exception_formats(self):
        """Gets the exception_formats of this ServiceInfo.  # noqa: E501

        Exception formats the service can provide.  # noqa: E501

        :return: The exception_formats of this ServiceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._exception_formats

    @exception_formats.setter
    def exception_formats(self, exception_formats):
        """Sets the exception_formats of this ServiceInfo.

        Exception formats the service can provide.  # noqa: E501

        :param exception_formats: The exception_formats of this ServiceInfo.  # noqa: E501
        :type: list[str]
        """

        self._exception_formats = exception_formats

    @property
    def cite_compliant(self):
        """Gets the cite_compliant of this ServiceInfo.  # noqa: E501

        Status of service CITE compliance.  # noqa: E501

        :return: The cite_compliant of this ServiceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._cite_compliant

    @cite_compliant.setter
    def cite_compliant(self, cite_compliant):
        """Sets the cite_compliant of this ServiceInfo.

        Status of service CITE compliance.  # noqa: E501

        :param cite_compliant: The cite_compliant of this ServiceInfo.  # noqa: E501
        :type: bool
        """

        self._cite_compliant = cite_compliant

    @property
    def online_resource(self):
        """Gets the online_resource of this ServiceInfo.  # noqa: E501


        :return: The online_resource of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._online_resource

    @online_resource.setter
    def online_resource(self, online_resource):
        """Sets the online_resource of this ServiceInfo.


        :param online_resource: The online_resource of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._online_resource = online_resource

    @property
    def schema_base_url(self):
        """Gets the schema_base_url of this ServiceInfo.  # noqa: E501

        The base url for the schemas describing the service.  # noqa: E501

        :return: The schema_base_url of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._schema_base_url

    @schema_base_url.setter
    def schema_base_url(self, schema_base_url):
        """Sets the schema_base_url of this ServiceInfo.

        The base url for the schemas describing the service.  # noqa: E501

        :param schema_base_url: The schema_base_url of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._schema_base_url = schema_base_url

    @property
    def output_strategy(self):
        """Gets the output_strategy of this ServiceInfo.  # noqa: E501

        This value is an identifier which indicates how the output of a response should behave. An example might be \"performance\", indicating that the response should be encoded as quickly as possible.  # noqa: E501

        :return: The output_strategy of this ServiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._output_strategy

    @output_strategy.setter
    def output_strategy(self, output_strategy):
        """Sets the output_strategy of this ServiceInfo.

        This value is an identifier which indicates how the output of a response should behave. An example might be \"performance\", indicating that the response should be encoded as quickly as possible.  # noqa: E501

        :param output_strategy: The output_strategy of this ServiceInfo.  # noqa: E501
        :type: str
        """

        self._output_strategy = output_strategy

    @property
    def verbose(self):
        """Gets the verbose of this ServiceInfo.  # noqa: E501

        Flag indicating if the service should be verbose or not.  # noqa: E501

        :return: The verbose of this ServiceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this ServiceInfo.

        Flag indicating if the service should be verbose or not.  # noqa: E501

        :param verbose: The verbose of this ServiceInfo.  # noqa: E501
        :type: bool
        """

        self._verbose = verbose

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
