# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoverageDimensionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'range': 'NumberRangeResponse',
        'null_values': 'DoubleArrayResponse',
        'unit': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'range': 'range',
        'null_values': 'nullValues',
        'unit': 'unit'
    }

    def __init__(self, id=None, name=None, description=None, range=None, null_values=None, unit=None):  # noqa: E501
        """CoverageDimensionResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._range = None
        self._null_values = None
        self._unit = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if range is not None:
            self.range = range
        if null_values is not None:
            self.null_values = null_values
        if unit is not None:
            self.unit = unit

    @property
    def id(self):
        """Gets the id of this CoverageDimensionResponse.  # noqa: E501


        :return: The id of this CoverageDimensionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CoverageDimensionResponse.


        :param id: The id of this CoverageDimensionResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CoverageDimensionResponse.  # noqa: E501


        :return: The name of this CoverageDimensionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CoverageDimensionResponse.


        :param name: The name of this CoverageDimensionResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CoverageDimensionResponse.  # noqa: E501


        :return: The description of this CoverageDimensionResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CoverageDimensionResponse.


        :param description: The description of this CoverageDimensionResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def range(self):
        """Gets the range of this CoverageDimensionResponse.  # noqa: E501


        :return: The range of this CoverageDimensionResponse.  # noqa: E501
        :rtype: NumberRangeResponse
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this CoverageDimensionResponse.


        :param range: The range of this CoverageDimensionResponse.  # noqa: E501
        :type: NumberRangeResponse
        """

        self._range = range

    @property
    def null_values(self):
        """Gets the null_values of this CoverageDimensionResponse.  # noqa: E501


        :return: The null_values of this CoverageDimensionResponse.  # noqa: E501
        :rtype: DoubleArrayResponse
        """
        return self._null_values

    @null_values.setter
    def null_values(self, null_values):
        """Sets the null_values of this CoverageDimensionResponse.


        :param null_values: The null_values of this CoverageDimensionResponse.  # noqa: E501
        :type: DoubleArrayResponse
        """

        self._null_values = null_values

    @property
    def unit(self):
        """Gets the unit of this CoverageDimensionResponse.  # noqa: E501


        :return: The unit of this CoverageDimensionResponse.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CoverageDimensionResponse.


        :param unit: The unit of this CoverageDimensionResponse.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoverageDimensionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoverageDimensionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
