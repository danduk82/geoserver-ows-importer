# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettingsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'charset': 'str',
        'num_decimals': 'int',
        'online_resource': 'str',
        'proxy_base_url': 'str',
        'schema_base_url': 'str',
        'verbose': 'bool',
        'local_workspace_includes_prefix': 'bool',
        'show_created_time_columns_in_admin_list': 'bool',
        'show_modified_time_columns_in_admin_list': 'bool',
        'contact': 'ContactInfo'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'charset': 'charset',
        'num_decimals': 'numDecimals',
        'online_resource': 'onlineResource',
        'proxy_base_url': 'proxyBaseUrl',
        'schema_base_url': 'schemaBaseUrl',
        'verbose': 'verbose',
        'local_workspace_includes_prefix': 'localWorkspaceIncludesPrefix',
        'show_created_time_columns_in_admin_list': 'showCreatedTimeColumnsInAdminList',
        'show_modified_time_columns_in_admin_list': 'showModifiedTimeColumnsInAdminList',
        'contact': 'contact'
    }

    def __init__(self, id=None, title=None, charset=None, num_decimals=None, online_resource=None, proxy_base_url=None, schema_base_url=None, verbose=None, local_workspace_includes_prefix=None, show_created_time_columns_in_admin_list=None, show_modified_time_columns_in_admin_list=None, contact=None):  # noqa: E501
        """SettingsInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._charset = None
        self._num_decimals = None
        self._online_resource = None
        self._proxy_base_url = None
        self._schema_base_url = None
        self._verbose = None
        self._local_workspace_includes_prefix = None
        self._show_created_time_columns_in_admin_list = None
        self._show_modified_time_columns_in_admin_list = None
        self._contact = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if charset is not None:
            self.charset = charset
        if num_decimals is not None:
            self.num_decimals = num_decimals
        if online_resource is not None:
            self.online_resource = online_resource
        if proxy_base_url is not None:
            self.proxy_base_url = proxy_base_url
        if schema_base_url is not None:
            self.schema_base_url = schema_base_url
        if verbose is not None:
            self.verbose = verbose
        if local_workspace_includes_prefix is not None:
            self.local_workspace_includes_prefix = local_workspace_includes_prefix
        if show_created_time_columns_in_admin_list is not None:
            self.show_created_time_columns_in_admin_list = show_created_time_columns_in_admin_list
        if show_modified_time_columns_in_admin_list is not None:
            self.show_modified_time_columns_in_admin_list = show_modified_time_columns_in_admin_list
        if contact is not None:
            self.contact = contact

    @property
    def id(self):
        """Gets the id of this SettingsInfo.  # noqa: E501


        :return: The id of this SettingsInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SettingsInfo.


        :param id: The id of this SettingsInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this SettingsInfo.  # noqa: E501

        The title of the settings instance  # noqa: E501

        :return: The title of this SettingsInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SettingsInfo.

        The title of the settings instance  # noqa: E501

        :param title: The title of this SettingsInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def charset(self):
        """Gets the charset of this SettingsInfo.  # noqa: E501

        The default character set  # noqa: E501

        :return: The charset of this SettingsInfo.  # noqa: E501
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this SettingsInfo.

        The default character set  # noqa: E501

        :param charset: The charset of this SettingsInfo.  # noqa: E501
        :type: str
        """

        self._charset = charset

    @property
    def num_decimals(self):
        """Gets the num_decimals of this SettingsInfo.  # noqa: E501

        A cap on the number of decimals to use when encoding floating point numbers  # noqa: E501

        :return: The num_decimals of this SettingsInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_decimals

    @num_decimals.setter
    def num_decimals(self, num_decimals):
        """Sets the num_decimals of this SettingsInfo.

        A cap on the number of decimals to use when encoding floating point numbers  # noqa: E501

        :param num_decimals: The num_decimals of this SettingsInfo.  # noqa: E501
        :type: int
        """

        self._num_decimals = num_decimals

    @property
    def online_resource(self):
        """Gets the online_resource of this SettingsInfo.  # noqa: E501

        Provider web site (used for default contact information, or service provider information if user has not filled in contact details.  # noqa: E501

        :return: The online_resource of this SettingsInfo.  # noqa: E501
        :rtype: str
        """
        return self._online_resource

    @online_resource.setter
    def online_resource(self, online_resource):
        """Sets the online_resource of this SettingsInfo.

        Provider web site (used for default contact information, or service provider information if user has not filled in contact details.  # noqa: E501

        :param online_resource: The online_resource of this SettingsInfo.  # noqa: E501
        :type: str
        """

        self._online_resource = online_resource

    @property
    def proxy_base_url(self):
        """Gets the proxy_base_url of this SettingsInfo.  # noqa: E501

        The url of a proxy in front of the GeoServer instance. This value is used when a reference back to the GeoServer instance must be made in a response.  # noqa: E501

        :return: The proxy_base_url of this SettingsInfo.  # noqa: E501
        :rtype: str
        """
        return self._proxy_base_url

    @proxy_base_url.setter
    def proxy_base_url(self, proxy_base_url):
        """Sets the proxy_base_url of this SettingsInfo.

        The url of a proxy in front of the GeoServer instance. This value is used when a reference back to the GeoServer instance must be made in a response.  # noqa: E501

        :param proxy_base_url: The proxy_base_url of this SettingsInfo.  # noqa: E501
        :type: str
        """

        self._proxy_base_url = proxy_base_url

    @property
    def schema_base_url(self):
        """Gets the schema_base_url of this SettingsInfo.  # noqa: E501

        The base url to use when including a reference to an xml schema document in a response.  # noqa: E501

        :return: The schema_base_url of this SettingsInfo.  # noqa: E501
        :rtype: str
        """
        return self._schema_base_url

    @schema_base_url.setter
    def schema_base_url(self, schema_base_url):
        """Sets the schema_base_url of this SettingsInfo.

        The base url to use when including a reference to an xml schema document in a response.  # noqa: E501

        :param schema_base_url: The schema_base_url of this SettingsInfo.  # noqa: E501
        :type: str
        """

        self._schema_base_url = schema_base_url

    @property
    def verbose(self):
        """Gets the verbose of this SettingsInfo.  # noqa: E501

        When set to false GeoServer will also take step so to strip out some formating and produce more condensed output.  # noqa: E501

        :return: The verbose of this SettingsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this SettingsInfo.

        When set to false GeoServer will also take step so to strip out some formating and produce more condensed output.  # noqa: E501

        :param verbose: The verbose of this SettingsInfo.  # noqa: E501
        :type: bool
        """

        self._verbose = verbose

    @property
    def local_workspace_includes_prefix(self):
        """Gets the local_workspace_includes_prefix of this SettingsInfo.  # noqa: E501

        If true local workspace should keep the namespace prefixes in getCapabilities etc...  # noqa: E501

        :return: The local_workspace_includes_prefix of this SettingsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._local_workspace_includes_prefix

    @local_workspace_includes_prefix.setter
    def local_workspace_includes_prefix(self, local_workspace_includes_prefix):
        """Sets the local_workspace_includes_prefix of this SettingsInfo.

        If true local workspace should keep the namespace prefixes in getCapabilities etc...  # noqa: E501

        :param local_workspace_includes_prefix: The local_workspace_includes_prefix of this SettingsInfo.  # noqa: E501
        :type: bool
        """

        self._local_workspace_includes_prefix = local_workspace_includes_prefix

    @property
    def show_created_time_columns_in_admin_list(self):
        """Gets the show_created_time_columns_in_admin_list of this SettingsInfo.  # noqa: E501

        Set whether or not a local workspace should keep namespace prefixes in the getCapabilities  # noqa: E501

        :return: The show_created_time_columns_in_admin_list of this SettingsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._show_created_time_columns_in_admin_list

    @show_created_time_columns_in_admin_list.setter
    def show_created_time_columns_in_admin_list(self, show_created_time_columns_in_admin_list):
        """Sets the show_created_time_columns_in_admin_list of this SettingsInfo.

        Set whether or not a local workspace should keep namespace prefixes in the getCapabilities  # noqa: E501

        :param show_created_time_columns_in_admin_list: The show_created_time_columns_in_admin_list of this SettingsInfo.  # noqa: E501
        :type: bool
        """

        self._show_created_time_columns_in_admin_list = show_created_time_columns_in_admin_list

    @property
    def show_modified_time_columns_in_admin_list(self):
        """Gets the show_modified_time_columns_in_admin_list of this SettingsInfo.  # noqa: E501


        :return: The show_modified_time_columns_in_admin_list of this SettingsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._show_modified_time_columns_in_admin_list

    @show_modified_time_columns_in_admin_list.setter
    def show_modified_time_columns_in_admin_list(self, show_modified_time_columns_in_admin_list):
        """Sets the show_modified_time_columns_in_admin_list of this SettingsInfo.


        :param show_modified_time_columns_in_admin_list: The show_modified_time_columns_in_admin_list of this SettingsInfo.  # noqa: E501
        :type: bool
        """

        self._show_modified_time_columns_in_admin_list = show_modified_time_columns_in_admin_list

    @property
    def contact(self):
        """Gets the contact of this SettingsInfo.  # noqa: E501


        :return: The contact of this SettingsInfo.  # noqa: E501
        :rtype: ContactInfo
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this SettingsInfo.


        :param contact: The contact of this SettingsInfo.  # noqa: E501
        :type: ContactInfo
        """

        self._contact = contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
