# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from geoserver.models.published_info import PublishedInfo  # noqa: F401,E501

class LayerGroupInfo(PublishedInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'guery_disabled': 'bool',
        'keywords': 'KeywordInfo',
        'workspace': 'WorkspaceInfo',
        'root_layer': 'LayerInfo',
        'root_layer_style': 'StyleInfo',
        'layers': 'list[PublishedInfo]',
        'styles': 'list[StyleInfo]',
        'bounds': 'EnvelopeInfo',
        'metadatalinks': 'list[MetadataLinkInfo]'
    }
    if hasattr(PublishedInfo, "swagger_types"):
        swagger_types.update(PublishedInfo.swagger_types)

    attribute_map = {
        'mode': 'mode',
        'guery_disabled': 'gueryDisabled',
        'keywords': 'keywords',
        'workspace': 'workspace',
        'root_layer': 'rootLayer',
        'root_layer_style': 'rootLayerStyle',
        'layers': 'layers',
        'styles': 'styles',
        'bounds': 'bounds',
        'metadatalinks': 'metadatalinks'
    }
    if hasattr(PublishedInfo, "attribute_map"):
        attribute_map.update(PublishedInfo.attribute_map)

    def __init__(self, mode=None, guery_disabled=None, keywords=None, workspace=None, root_layer=None, root_layer_style=None, layers=None, styles=None, bounds=None, metadatalinks=None, *args, **kwargs):  # noqa: E501
        """LayerGroupInfo - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._guery_disabled = None
        self._keywords = None
        self._workspace = None
        self._root_layer = None
        self._root_layer_style = None
        self._layers = None
        self._styles = None
        self._bounds = None
        self._metadatalinks = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if guery_disabled is not None:
            self.guery_disabled = guery_disabled
        if keywords is not None:
            self.keywords = keywords
        if workspace is not None:
            self.workspace = workspace
        if root_layer is not None:
            self.root_layer = root_layer
        if root_layer_style is not None:
            self.root_layer_style = root_layer_style
        if layers is not None:
            self.layers = layers
        if styles is not None:
            self.styles = styles
        if bounds is not None:
            self.bounds = bounds
        if metadatalinks is not None:
            self.metadatalinks = metadatalinks
        PublishedInfo.__init__(self, *args, **kwargs)

    @property
    def mode(self):
        """Gets the mode of this LayerGroupInfo.  # noqa: E501


        :return: The mode of this LayerGroupInfo.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this LayerGroupInfo.


        :param mode: The mode of this LayerGroupInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["SINGLE", "OPAQUE_CONTAINER", "NAMED", "CONTAINER", "EO"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def guery_disabled(self):
        """Gets the guery_disabled of this LayerGroupInfo.  # noqa: E501


        :return: The guery_disabled of this LayerGroupInfo.  # noqa: E501
        :rtype: bool
        """
        return self._guery_disabled

    @guery_disabled.setter
    def guery_disabled(self, guery_disabled):
        """Sets the guery_disabled of this LayerGroupInfo.


        :param guery_disabled: The guery_disabled of this LayerGroupInfo.  # noqa: E501
        :type: bool
        """

        self._guery_disabled = guery_disabled

    @property
    def keywords(self):
        """Gets the keywords of this LayerGroupInfo.  # noqa: E501


        :return: The keywords of this LayerGroupInfo.  # noqa: E501
        :rtype: KeywordInfo
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this LayerGroupInfo.


        :param keywords: The keywords of this LayerGroupInfo.  # noqa: E501
        :type: KeywordInfo
        """

        self._keywords = keywords

    @property
    def workspace(self):
        """Gets the workspace of this LayerGroupInfo.  # noqa: E501


        :return: The workspace of this LayerGroupInfo.  # noqa: E501
        :rtype: WorkspaceInfo
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this LayerGroupInfo.


        :param workspace: The workspace of this LayerGroupInfo.  # noqa: E501
        :type: WorkspaceInfo
        """

        self._workspace = workspace

    @property
    def root_layer(self):
        """Gets the root_layer of this LayerGroupInfo.  # noqa: E501


        :return: The root_layer of this LayerGroupInfo.  # noqa: E501
        :rtype: LayerInfo
        """
        return self._root_layer

    @root_layer.setter
    def root_layer(self, root_layer):
        """Sets the root_layer of this LayerGroupInfo.


        :param root_layer: The root_layer of this LayerGroupInfo.  # noqa: E501
        :type: LayerInfo
        """

        self._root_layer = root_layer

    @property
    def root_layer_style(self):
        """Gets the root_layer_style of this LayerGroupInfo.  # noqa: E501


        :return: The root_layer_style of this LayerGroupInfo.  # noqa: E501
        :rtype: StyleInfo
        """
        return self._root_layer_style

    @root_layer_style.setter
    def root_layer_style(self, root_layer_style):
        """Sets the root_layer_style of this LayerGroupInfo.


        :param root_layer_style: The root_layer_style of this LayerGroupInfo.  # noqa: E501
        :type: StyleInfo
        """

        self._root_layer_style = root_layer_style

    @property
    def layers(self):
        """Gets the layers of this LayerGroupInfo.  # noqa: E501


        :return: The layers of this LayerGroupInfo.  # noqa: E501
        :rtype: list[PublishedInfo]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this LayerGroupInfo.


        :param layers: The layers of this LayerGroupInfo.  # noqa: E501
        :type: list[PublishedInfo]
        """

        self._layers = layers

    @property
    def styles(self):
        """Gets the styles of this LayerGroupInfo.  # noqa: E501


        :return: The styles of this LayerGroupInfo.  # noqa: E501
        :rtype: list[StyleInfo]
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this LayerGroupInfo.


        :param styles: The styles of this LayerGroupInfo.  # noqa: E501
        :type: list[StyleInfo]
        """

        self._styles = styles

    @property
    def bounds(self):
        """Gets the bounds of this LayerGroupInfo.  # noqa: E501


        :return: The bounds of this LayerGroupInfo.  # noqa: E501
        :rtype: EnvelopeInfo
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds):
        """Sets the bounds of this LayerGroupInfo.


        :param bounds: The bounds of this LayerGroupInfo.  # noqa: E501
        :type: EnvelopeInfo
        """

        self._bounds = bounds

    @property
    def metadatalinks(self):
        """Gets the metadatalinks of this LayerGroupInfo.  # noqa: E501


        :return: The metadatalinks of this LayerGroupInfo.  # noqa: E501
        :rtype: list[MetadataLinkInfo]
        """
        return self._metadatalinks

    @metadatalinks.setter
    def metadatalinks(self, metadatalinks):
        """Sets the metadatalinks of this LayerGroupInfo.


        :param metadatalinks: The metadatalinks of this LayerGroupInfo.  # noqa: E501
        :type: list[MetadataLinkInfo]
        """

        self._metadatalinks = metadatalinks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerGroupInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerGroupInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
