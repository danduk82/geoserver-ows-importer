# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from geoserver.models.service_info import ServiceInfo  # noqa: F401,E501

class WCSInfo(ServiceInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gml_prefixing': 'bool',
        'lat_lon': 'bool',
        'max_input_memory': 'bool',
        'max_output_memory': 'bool'
    }
    if hasattr(ServiceInfo, "swagger_types"):
        swagger_types.update(ServiceInfo.swagger_types)

    attribute_map = {
        'gml_prefixing': 'gmlPrefixing',
        'lat_lon': 'latLon',
        'max_input_memory': 'maxInputMemory',
        'max_output_memory': 'maxOutputMemory'
    }
    if hasattr(ServiceInfo, "attribute_map"):
        attribute_map.update(ServiceInfo.attribute_map)

    def __init__(self, gml_prefixing=None, lat_lon=None, max_input_memory=None, max_output_memory=None, *args, **kwargs):  # noqa: E501
        """WCSInfo - a model defined in Swagger"""  # noqa: E501
        self._gml_prefixing = None
        self._lat_lon = None
        self._max_input_memory = None
        self._max_output_memory = None
        self.discriminator = None
        if gml_prefixing is not None:
            self.gml_prefixing = gml_prefixing
        if lat_lon is not None:
            self.lat_lon = lat_lon
        if max_input_memory is not None:
            self.max_input_memory = max_input_memory
        if max_output_memory is not None:
            self.max_output_memory = max_output_memory
        ServiceInfo.__init__(self, *args, **kwargs)

    @property
    def gml_prefixing(self):
        """Gets the gml_prefixing of this WCSInfo.  # noqa: E501


        :return: The gml_prefixing of this WCSInfo.  # noqa: E501
        :rtype: bool
        """
        return self._gml_prefixing

    @gml_prefixing.setter
    def gml_prefixing(self, gml_prefixing):
        """Sets the gml_prefixing of this WCSInfo.


        :param gml_prefixing: The gml_prefixing of this WCSInfo.  # noqa: E501
        :type: bool
        """

        self._gml_prefixing = gml_prefixing

    @property
    def lat_lon(self):
        """Gets the lat_lon of this WCSInfo.  # noqa: E501


        :return: The lat_lon of this WCSInfo.  # noqa: E501
        :rtype: bool
        """
        return self._lat_lon

    @lat_lon.setter
    def lat_lon(self, lat_lon):
        """Sets the lat_lon of this WCSInfo.


        :param lat_lon: The lat_lon of this WCSInfo.  # noqa: E501
        :type: bool
        """

        self._lat_lon = lat_lon

    @property
    def max_input_memory(self):
        """Gets the max_input_memory of this WCSInfo.  # noqa: E501


        :return: The max_input_memory of this WCSInfo.  # noqa: E501
        :rtype: bool
        """
        return self._max_input_memory

    @max_input_memory.setter
    def max_input_memory(self, max_input_memory):
        """Sets the max_input_memory of this WCSInfo.


        :param max_input_memory: The max_input_memory of this WCSInfo.  # noqa: E501
        :type: bool
        """

        self._max_input_memory = max_input_memory

    @property
    def max_output_memory(self):
        """Gets the max_output_memory of this WCSInfo.  # noqa: E501


        :return: The max_output_memory of this WCSInfo.  # noqa: E501
        :rtype: bool
        """
        return self._max_output_memory

    @max_output_memory.setter
    def max_output_memory(self, max_output_memory):
        """Sets the max_output_memory of this WCSInfo.


        :param max_output_memory: The max_output_memory of this WCSInfo.  # noqa: E501
        :type: bool
        """

        self._max_output_memory = max_output_memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WCSInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WCSInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
