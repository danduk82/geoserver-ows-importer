# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from geoserver.models.service_info import ServiceInfo  # noqa: F401,E501

class WMSInfo(ServiceInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'srs': 'SRSListWrapper',
        'interpolation': 'str',
        'get_feature_info_mime_type_checking_enabled': 'bool',
        'get_map_mime_types': 'object',
        'get_map_mime_type_checking_enabled': 'bool',
        'dynamic_styling_disabled': 'bool',
        'max_buffer': 'int',
        'max_request_memory': 'int',
        'max_rendering_time': 'int',
        'max_rendering_errors': 'int'
    }
    if hasattr(ServiceInfo, "swagger_types"):
        swagger_types.update(ServiceInfo.swagger_types)

    attribute_map = {
        'srs': 'srs',
        'interpolation': 'interpolation',
        'get_feature_info_mime_type_checking_enabled': 'getFeatureInfoMimeTypeCheckingEnabled',
        'get_map_mime_types': 'getMapMimeTypes',
        'get_map_mime_type_checking_enabled': 'getMapMimeTypeCheckingEnabled',
        'dynamic_styling_disabled': 'dynamicStylingDisabled',
        'max_buffer': 'maxBuffer',
        'max_request_memory': 'maxRequestMemory',
        'max_rendering_time': 'maxRenderingTime',
        'max_rendering_errors': 'maxRenderingErrors'
    }
    if hasattr(ServiceInfo, "attribute_map"):
        attribute_map.update(ServiceInfo.attribute_map)

    def __init__(self, srs=None, interpolation=None, get_feature_info_mime_type_checking_enabled=None, get_map_mime_types=None, get_map_mime_type_checking_enabled=None, dynamic_styling_disabled=None, max_buffer=None, max_request_memory=None, max_rendering_time=None, max_rendering_errors=None, *args, **kwargs):  # noqa: E501
        """WMSInfo - a model defined in Swagger"""  # noqa: E501
        self._srs = None
        self._interpolation = None
        self._get_feature_info_mime_type_checking_enabled = None
        self._get_map_mime_types = None
        self._get_map_mime_type_checking_enabled = None
        self._dynamic_styling_disabled = None
        self._max_buffer = None
        self._max_request_memory = None
        self._max_rendering_time = None
        self._max_rendering_errors = None
        self.discriminator = None
        if srs is not None:
            self.srs = srs
        if interpolation is not None:
            self.interpolation = interpolation
        if get_feature_info_mime_type_checking_enabled is not None:
            self.get_feature_info_mime_type_checking_enabled = get_feature_info_mime_type_checking_enabled
        if get_map_mime_types is not None:
            self.get_map_mime_types = get_map_mime_types
        if get_map_mime_type_checking_enabled is not None:
            self.get_map_mime_type_checking_enabled = get_map_mime_type_checking_enabled
        if dynamic_styling_disabled is not None:
            self.dynamic_styling_disabled = dynamic_styling_disabled
        if max_buffer is not None:
            self.max_buffer = max_buffer
        if max_request_memory is not None:
            self.max_request_memory = max_request_memory
        if max_rendering_time is not None:
            self.max_rendering_time = max_rendering_time
        if max_rendering_errors is not None:
            self.max_rendering_errors = max_rendering_errors
        ServiceInfo.__init__(self, *args, **kwargs)

    @property
    def srs(self):
        """Gets the srs of this WMSInfo.  # noqa: E501


        :return: The srs of this WMSInfo.  # noqa: E501
        :rtype: SRSListWrapper
        """
        return self._srs

    @srs.setter
    def srs(self, srs):
        """Sets the srs of this WMSInfo.


        :param srs: The srs of this WMSInfo.  # noqa: E501
        :type: SRSListWrapper
        """

        self._srs = srs

    @property
    def interpolation(self):
        """Gets the interpolation of this WMSInfo.  # noqa: E501


        :return: The interpolation of this WMSInfo.  # noqa: E501
        :rtype: str
        """
        return self._interpolation

    @interpolation.setter
    def interpolation(self, interpolation):
        """Sets the interpolation of this WMSInfo.


        :param interpolation: The interpolation of this WMSInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Nearest", "Bilinear", "Bicubic"]  # noqa: E501
        if interpolation not in allowed_values:
            raise ValueError(
                "Invalid value for `interpolation` ({0}), must be one of {1}"  # noqa: E501
                .format(interpolation, allowed_values)
            )

        self._interpolation = interpolation

    @property
    def get_feature_info_mime_type_checking_enabled(self):
        """Gets the get_feature_info_mime_type_checking_enabled of this WMSInfo.  # noqa: E501

        Flag indicating if getFeatureInfo MIME type checking is enabled  # noqa: E501

        :return: The get_feature_info_mime_type_checking_enabled of this WMSInfo.  # noqa: E501
        :rtype: bool
        """
        return self._get_feature_info_mime_type_checking_enabled

    @get_feature_info_mime_type_checking_enabled.setter
    def get_feature_info_mime_type_checking_enabled(self, get_feature_info_mime_type_checking_enabled):
        """Sets the get_feature_info_mime_type_checking_enabled of this WMSInfo.

        Flag indicating if getFeatureInfo MIME type checking is enabled  # noqa: E501

        :param get_feature_info_mime_type_checking_enabled: The get_feature_info_mime_type_checking_enabled of this WMSInfo.  # noqa: E501
        :type: bool
        """

        self._get_feature_info_mime_type_checking_enabled = get_feature_info_mime_type_checking_enabled

    @property
    def get_map_mime_types(self):
        """Gets the get_map_mime_types of this WMSInfo.  # noqa: E501

        A set of mime types allowed for a getMap request. Active if getMapMimeTypeCheckingEnabled is true  # noqa: E501

        :return: The get_map_mime_types of this WMSInfo.  # noqa: E501
        :rtype: object
        """
        return self._get_map_mime_types

    @get_map_mime_types.setter
    def get_map_mime_types(self, get_map_mime_types):
        """Sets the get_map_mime_types of this WMSInfo.

        A set of mime types allowed for a getMap request. Active if getMapMimeTypeCheckingEnabled is true  # noqa: E501

        :param get_map_mime_types: The get_map_mime_types of this WMSInfo.  # noqa: E501
        :type: object
        """

        self._get_map_mime_types = get_map_mime_types

    @property
    def get_map_mime_type_checking_enabled(self):
        """Gets the get_map_mime_type_checking_enabled of this WMSInfo.  # noqa: E501

        Flag indicating if getMap MIME type checking is enabled.  # noqa: E501

        :return: The get_map_mime_type_checking_enabled of this WMSInfo.  # noqa: E501
        :rtype: bool
        """
        return self._get_map_mime_type_checking_enabled

    @get_map_mime_type_checking_enabled.setter
    def get_map_mime_type_checking_enabled(self, get_map_mime_type_checking_enabled):
        """Sets the get_map_mime_type_checking_enabled of this WMSInfo.

        Flag indicating if getMap MIME type checking is enabled.  # noqa: E501

        :param get_map_mime_type_checking_enabled: The get_map_mime_type_checking_enabled of this WMSInfo.  # noqa: E501
        :type: bool
        """

        self._get_map_mime_type_checking_enabled = get_map_mime_type_checking_enabled

    @property
    def dynamic_styling_disabled(self):
        """Gets the dynamic_styling_disabled of this WMSInfo.  # noqa: E501

        status of dynamic styling (SLD and SLD_BODY params) allowance  # noqa: E501

        :return: The dynamic_styling_disabled of this WMSInfo.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_styling_disabled

    @dynamic_styling_disabled.setter
    def dynamic_styling_disabled(self, dynamic_styling_disabled):
        """Sets the dynamic_styling_disabled of this WMSInfo.

        status of dynamic styling (SLD and SLD_BODY params) allowance  # noqa: E501

        :param dynamic_styling_disabled: The dynamic_styling_disabled of this WMSInfo.  # noqa: E501
        :type: bool
        """

        self._dynamic_styling_disabled = dynamic_styling_disabled

    @property
    def max_buffer(self):
        """Gets the max_buffer of this WMSInfo.  # noqa: E501

        Maximum search radius for GetFeatureInfo  # noqa: E501

        :return: The max_buffer of this WMSInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_buffer

    @max_buffer.setter
    def max_buffer(self, max_buffer):
        """Sets the max_buffer of this WMSInfo.

        Maximum search radius for GetFeatureInfo  # noqa: E501

        :param max_buffer: The max_buffer of this WMSInfo.  # noqa: E501
        :type: int
        """

        self._max_buffer = max_buffer

    @property
    def max_request_memory(self):
        """Gets the max_request_memory of this WMSInfo.  # noqa: E501

        Max amount of memory, in kilobytes, that each WMS request can allocate (each output format will make a best effort attempt to respect it, but there are no guarantees). 0 indicates no limit.  # noqa: E501

        :return: The max_request_memory of this WMSInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_request_memory

    @max_request_memory.setter
    def max_request_memory(self, max_request_memory):
        """Sets the max_request_memory of this WMSInfo.

        Max amount of memory, in kilobytes, that each WMS request can allocate (each output format will make a best effort attempt to respect it, but there are no guarantees). 0 indicates no limit.  # noqa: E501

        :param max_request_memory: The max_request_memory of this WMSInfo.  # noqa: E501
        :type: int
        """

        self._max_request_memory = max_request_memory

    @property
    def max_rendering_time(self):
        """Gets the max_rendering_time of this WMSInfo.  # noqa: E501

        Max time, in seconds, a WMS request is allowed to spend rendering the map. Various output formats will do a best effort to respect it (raster formats, for example, will account just rendering time, but not image encoding time).  # noqa: E501

        :return: The max_rendering_time of this WMSInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_rendering_time

    @max_rendering_time.setter
    def max_rendering_time(self, max_rendering_time):
        """Sets the max_rendering_time of this WMSInfo.

        Max time, in seconds, a WMS request is allowed to spend rendering the map. Various output formats will do a best effort to respect it (raster formats, for example, will account just rendering time, but not image encoding time).  # noqa: E501

        :param max_rendering_time: The max_rendering_time of this WMSInfo.  # noqa: E501
        :type: int
        """

        self._max_rendering_time = max_rendering_time

    @property
    def max_rendering_errors(self):
        """Gets the max_rendering_errors of this WMSInfo.  # noqa: E501

        Max number of rendering errors that will be tolerated before stating the rendering operation failed by throwing a service exception back to the client  # noqa: E501

        :return: The max_rendering_errors of this WMSInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_rendering_errors

    @max_rendering_errors.setter
    def max_rendering_errors(self, max_rendering_errors):
        """Sets the max_rendering_errors of this WMSInfo.

        Max number of rendering errors that will be tolerated before stating the rendering operation failed by throwing a service exception back to the client  # noqa: E501

        :param max_rendering_errors: The max_rendering_errors of this WMSInfo.  # noqa: E501
        :type: int
        """

        self._max_rendering_errors = max_rendering_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WMSInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WMSInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
