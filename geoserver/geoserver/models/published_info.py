# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublishedInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'PublishedType',
        'name': 'str',
        'title': 'str',
        'abstract': 'str',
        'metadata': 'MetadataMap',
        'authority_ur_ls': 'list[AuthorityURLInfo]',
        'identifiers': 'list[LayerIdentifierInfo]',
        'attribution': 'AttributionInfo'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'title': 'title',
        'abstract': 'abstract',
        'metadata': 'metadata',
        'authority_ur_ls': 'authorityURLs',
        'identifiers': 'identifiers',
        'attribution': 'attribution'
    }

    discriminator_value_class_map = {
            'VECTOR'.lower(): '#/components/schemas/LayerInfo',
            'RASTER'.lower(): '#/components/schemas/LayerInfo',
            'REMOTE'.lower(): '#/components/schemas/LayerInfo',
            'WMS'.lower(): '#/components/schemas/LayerInfo',
            'WMTS'.lower(): '#/components/schemas/LayerInfo',
            'GROUP'.lower(): '#/components/schemas/LayerGroupInfo',
    }

    def __init__(self, type=None, name=None, title=None, abstract=None, metadata=None, authority_ur_ls=None, identifiers=None, attribution=None):  # noqa: E501
        """PublishedInfo - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._title = None
        self._abstract = None
        self._metadata = None
        self._authority_ur_ls = None
        self._identifiers = None
        self._attribution = None
        self.discriminator = 'type'
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if abstract is not None:
            self.abstract = abstract
        if metadata is not None:
            self.metadata = metadata
        if authority_ur_ls is not None:
            self.authority_ur_ls = authority_ur_ls
        if identifiers is not None:
            self.identifiers = identifiers
        if attribution is not None:
            self.attribution = attribution

    @property
    def type(self):
        """Gets the type of this PublishedInfo.  # noqa: E501


        :return: The type of this PublishedInfo.  # noqa: E501
        :rtype: PublishedType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PublishedInfo.


        :param type: The type of this PublishedInfo.  # noqa: E501
        :type: PublishedType
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this PublishedInfo.  # noqa: E501


        :return: The name of this PublishedInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublishedInfo.


        :param name: The name of this PublishedInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this PublishedInfo.  # noqa: E501


        :return: The title of this PublishedInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PublishedInfo.


        :param title: The title of this PublishedInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this PublishedInfo.  # noqa: E501


        :return: The abstract of this PublishedInfo.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this PublishedInfo.


        :param abstract: The abstract of this PublishedInfo.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def metadata(self):
        """Gets the metadata of this PublishedInfo.  # noqa: E501


        :return: The metadata of this PublishedInfo.  # noqa: E501
        :rtype: MetadataMap
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PublishedInfo.


        :param metadata: The metadata of this PublishedInfo.  # noqa: E501
        :type: MetadataMap
        """

        self._metadata = metadata

    @property
    def authority_ur_ls(self):
        """Gets the authority_ur_ls of this PublishedInfo.  # noqa: E501


        :return: The authority_ur_ls of this PublishedInfo.  # noqa: E501
        :rtype: list[AuthorityURLInfo]
        """
        return self._authority_ur_ls

    @authority_ur_ls.setter
    def authority_ur_ls(self, authority_ur_ls):
        """Sets the authority_ur_ls of this PublishedInfo.


        :param authority_ur_ls: The authority_ur_ls of this PublishedInfo.  # noqa: E501
        :type: list[AuthorityURLInfo]
        """

        self._authority_ur_ls = authority_ur_ls

    @property
    def identifiers(self):
        """Gets the identifiers of this PublishedInfo.  # noqa: E501


        :return: The identifiers of this PublishedInfo.  # noqa: E501
        :rtype: list[LayerIdentifierInfo]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this PublishedInfo.


        :param identifiers: The identifiers of this PublishedInfo.  # noqa: E501
        :type: list[LayerIdentifierInfo]
        """

        self._identifiers = identifiers

    @property
    def attribution(self):
        """Gets the attribution of this PublishedInfo.  # noqa: E501


        :return: The attribution of this PublishedInfo.  # noqa: E501
        :rtype: AttributionInfo
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this PublishedInfo.


        :param attribution: The attribution of this PublishedInfo.  # noqa: E501
        :type: AttributionInfo
        """

        self._attribution = attribution

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublishedInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublishedInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
