# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from geoserver.api_client import ApiClient


class StylesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_style_to_layer(self, body, layer, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the layer. The style named in styleBody must alread exist, and will not be altered by this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_style_to_layer(body, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost body: Style body information naming an existing style to add to the layer (required)
        :param str layer: Name of the layer to manage styles for (required)
        :param bool default: Whether to make this the default style for the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_style_to_layer_with_http_info(body, layer, **kwargs)  # noqa: E501
        else:
            (data) = self.add_style_to_layer_with_http_info(body, layer, **kwargs)  # noqa: E501
            return data

    def add_style_to_layer_with_http_info(self, body, layer, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the layer. The style named in styleBody must alread exist, and will not be altered by this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_style_to_layer_with_http_info(body, layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoPost body: Style body information naming an existing style to add to the layer (required)
        :param str layer: Name of the layer to manage styles for (required)
        :param bool default: Whether to make this the default style for the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'layer', 'default']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_style_to_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_style_to_layer`")  # noqa: E501
        # verify the required parameter 'layer' is set
        if ('layer' not in params or
                params['layer'] is None):
            raise ValueError("Missing the required parameter `layer` when calling `add_style_to_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []
        if 'default' in params:
            query_params.append(('default', params['default']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layer}/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_style(self, body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_style_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_style_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_style_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_style(self, body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_style_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_style_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_style_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new style  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_style_by_workspace(self, body, workspace, **kwargs):  # noqa: E501
        """Add a new style to a given workspace  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style_by_workspace(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str workspace: Name of workspace (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_style_by_workspace_with_http_info(body, workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.create_style_by_workspace_with_http_info(body, workspace, **kwargs)  # noqa: E501
            return data

    def create_style_by_workspace_with_http_info(self, body, workspace, **kwargs):  # noqa: E501
        """Add a new style to a given workspace  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style_by_workspace_with_http_info(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str workspace: Name of workspace (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_style_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_style_by_workspace`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `create_style_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_style_by_workspace(self, body, workspace, **kwargs):  # noqa: E501
        """Add a new style to a given workspace  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style_by_workspace(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str workspace: Name of workspace (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_style_by_workspace_with_http_info(body, workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.create_style_by_workspace_with_http_info(body, workspace, **kwargs)  # noqa: E501
            return data

    def create_style_by_workspace_with_http_info(self, body, workspace, **kwargs):  # noqa: E501
        """Add a new style to a given workspace  # noqa: E501

        Adds a new style entry to the server. Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case. Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then seperately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_style_by_workspace_with_http_info(body, workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StyleInfoWrapper body: The StyleInfo body of a request. (required)
        :param str workspace: Name of workspace (required)
        :param str name: The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_style_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_style_by_workspace`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `create_style_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_style(self, style, **kwargs):  # noqa: E501
        """Delete style  # noqa: E501

        Deletes a style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_style(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_style_with_http_info(style, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_style_with_http_info(style, **kwargs)  # noqa: E501
            return data

    def delete_style_with_http_info(self, style, **kwargs):  # noqa: E501
        """Delete style  # noqa: E501

        Deletes a style.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_style_with_http_info(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style', 'purge', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style' is set
        if ('style' not in params or
                params['style'] is None):
            raise ValueError("Missing the required parameter `style` when calling `delete_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/styles/{style}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_style_by_workspace(self, workspace, style, **kwargs):  # noqa: E501
        """Delete style in a given workspace  # noqa: E501

        Deletes a style in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_style_by_workspace(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_style_by_workspace_with_http_info(workspace, style, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_style_by_workspace_with_http_info(workspace, style, **kwargs)  # noqa: E501
            return data

    def delete_style_by_workspace_with_http_info(self, workspace, style, **kwargs):  # noqa: E501
        """Delete style in a given workspace  # noqa: E501

        Deletes a style in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_style_by_workspace_with_http_info(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool purge: Specifies whether the underlying file containing the style should be deleted on disk.
        :param bool recurse: Removes references to the specified style in existing layers.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'style', 'purge', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_style_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `delete_style_by_workspace`")  # noqa: E501
        # verify the required parameter 'style' is set
        if ('style' not in params or
                params['style'] is None):
            raise ValueError("Missing the required parameter `style` when calling `delete_style_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'purge' in params:
            query_params.append(('purge', params['purge']))  # noqa: E501
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles/{style}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_style(self, style, **kwargs):  # noqa: E501
        """Retrieve a style  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style defintion body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\",  \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\"). The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body. - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_style(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :return: StyleInfoWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_style_with_http_info(style, **kwargs)  # noqa: E501
        else:
            (data) = self.get_style_with_http_info(style, **kwargs)  # noqa: E501
            return data

    def get_style_with_http_info(self, style, **kwargs):  # noqa: E501
        """Retrieve a style  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style defintion body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\",  \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\"). The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body. - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_style_with_http_info(style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style: Name of the style to retrieve. (required)
        :return: StyleInfoWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'style' is set
        if ('style' not in params or
                params['style'] is None):
            raise ValueError("Missing the required parameter `style` when calling `get_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/styles/{style}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleInfoWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_style_by_workspace(self, workspace, style, **kwargs):  # noqa: E501
        """Retrieve a style from a given workspace  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style defintion body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\"). The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body. - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_style_by_workspace(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool quiet_on_not_found:
        :return: StyleInfoWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_style_by_workspace_with_http_info(workspace, style, **kwargs)  # noqa: E501
        else:
            (data) = self.get_style_by_workspace_with_http_info(workspace, style, **kwargs)  # noqa: E501
            return data

    def get_style_by_workspace_with_http_info(self, workspace, style, **kwargs):  # noqa: E501
        """Retrieve a style from a given workspace  # noqa: E501

        Retrieves a single style. Used to both request the style info and the style defintion body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\"). The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body. - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_style_by_workspace_with_http_info(workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool quiet_on_not_found:
        :return: StyleInfoWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace', 'style', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_style_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `get_style_by_workspace`")  # noqa: E501
        # verify the required parameter 'style' is set
        if ('style' not in params or
                params['style'] is None):
            raise ValueError("Missing the required parameter `style` when calling `get_style_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles/{style}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleInfoWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_styles(self, **kwargs):  # noqa: E501
        """Get a list of styles  # noqa: E501

        Displays a list of all styles on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StyleListWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_styles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_styles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_styles_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of styles  # noqa: E501

        Displays a list of all styles on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StyleListWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_styles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/styles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleListWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_styles_by_layer(self, layer, **kwargs):  # noqa: E501
        """Get a list of layer alternate styles  # noqa: E501

        Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles_by_layer(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_styles_by_layer_with_http_info(layer, **kwargs)  # noqa: E501
        else:
            (data) = self.get_styles_by_layer_with_http_info(layer, **kwargs)  # noqa: E501
            return data

    def get_styles_by_layer_with_http_info(self, layer, **kwargs):  # noqa: E501
        """Get a list of layer alternate styles  # noqa: E501

        Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles_by_layer_with_http_info(layer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer: Name of the layer to manage styles for (required)
        :return: StyleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_styles_by_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer' is set
        if ('layer' not in params or
                params['layer'] is None):
            raise ValueError("Missing the required parameter `layer` when calling `get_styles_by_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer' in params:
            path_params['layer'] = params['layer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/layers/{layer}/styles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_styles_by_workspace(self, workspace, **kwargs):  # noqa: E501
        """Get a list of styles in a given workspace  # noqa: E501

        Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles_by_workspace(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: StyleListWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_styles_by_workspace_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.get_styles_by_workspace_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def get_styles_by_workspace_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """Get a list of styles in a given workspace  # noqa: E501

        Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_styles_by_workspace_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace: Name of workspace (required)
        :return: StyleListWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_styles_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `get_styles_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StyleListWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_style(self, body, style, **kwargs):  # noqa: E501
        """Modify a single style  # noqa: E501

        Modifies a single style. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML). Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_style(body, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: The style body of a request. (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_style_with_http_info(body, style, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_style_with_http_info(body, style, **kwargs)  # noqa: E501
            return data

    def upload_style_with_http_info(self, body, style, **kwargs):  # noqa: E501
        """Modify a single style  # noqa: E501

        Modifies a single style. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML). Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_style_with_http_info(body, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: The style body of a request. (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'style', 'raw']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_style`")  # noqa: E501
        # verify the required parameter 'style' is set
        if ('style' not in params or
                params['style'] is None):
            raise ValueError("Missing the required parameter `style` when calling `upload_style`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.geoserver.mbstyle+json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/styles/{style}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_style_by_workspace(self, body, workspace, style, **kwargs):  # noqa: E501
        """Modify a single style in a given workspace  # noqa: E501

        Modifies a single style in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML). Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_style_by_workspace(body, workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: The style body of a request. (required)
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_style_by_workspace_with_http_info(body, workspace, style, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_style_by_workspace_with_http_info(body, workspace, style, **kwargs)  # noqa: E501
            return data

    def upload_style_by_workspace_with_http_info(self, body, workspace, style, **kwargs):  # noqa: E501
        """Modify a single style in a given workspace  # noqa: E501

        Modifies a single style in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML). Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_style_by_workspace_with_http_info(body, workspace, style, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: The style body of a request. (required)
        :param str workspace: Name of the workspace for style definitions (required)
        :param str style: Name of the style to retrieve. (required)
        :param bool raw: When set to \"true\", will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \"true\" or \"false\" (default). Only used when uploading a style file.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace', 'style', 'raw']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_style_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_style_by_workspace`")  # noqa: E501
        # verify the required parameter 'workspace' is set
        if ('workspace' not in params or
                params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `upload_style_by_workspace`")  # noqa: E501
        # verify the required parameter 'style' is set
        if ('style' not in params or
                params['style'] is None):
            raise ValueError("Missing the required parameter `style` when calling `upload_style_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace' in params:
            path_params['workspace'] = params['workspace']  # noqa: E501
        if 'style' in params:
            path_params['style'] = params['style']  # noqa: E501

        query_params = []
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.geoserver.mbstyle+json', 'application/vnd.ogc.sld+xml', 'application/vnd.ogc.se+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace}/styles/{style}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
