# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from geoserver.api_client import ApiClient


class LayersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_layer(self, body, **kwargs):  # noqa: E501
        """Create a new layer.  # noqa: E501

        Creates a new layer on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_layer(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LayerInfoWrapper body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_layer_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_layer_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_layer_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new layer.  # noqa: E501

        Creates a new layer on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_layer_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LayerInfoWrapper body: The updated layer definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/layers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_layer(self, qualified_layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer(qualified_layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualified_layer_name: The name of the layer to retrieve, preferrably including namespace prefix (e.g. \"cite:roads\") to avoid ambiguities (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_layer_with_http_info(qualified_layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_layer_with_http_info(qualified_layer_name, **kwargs)  # noqa: E501
            return data

    def delete_layer_with_http_info(self, qualified_layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer_with_http_info(qualified_layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualified_layer_name: The name of the layer to retrieve, preferrably including namespace prefix (e.g. \"cite:roads\") to avoid ambiguities (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qualified_layer_name', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qualified_layer_name' is set
        if ('qualified_layer_name' not in params or
                params['qualified_layer_name'] is None):
            raise ValueError("Missing the required parameter `qualified_layer_name` when calling `delete_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qualified_layer_name' in params:
            path_params['qualifiedLayerName'] = params['qualified_layer_name']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/layers/{qualifiedLayerName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_layer_by_workspace(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer_by_workspace(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve, *without* workspace prefix, since it's given by the workspaceName parameter already. Request will fail otherwise. (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_layer_by_workspace_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_layer_by_workspace_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
            return data

    def delete_layer_by_workspace_with_http_info(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Delete layer  # noqa: E501

        Deletes a layer from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_layer_by_workspace_with_http_info(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve, *without* workspace prefix, since it's given by the workspaceName parameter already. Request will fail otherwise. (required)
        :param bool recurse: Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layer groups reference the layer.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'layer_name', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_layer_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `delete_layer_by_workspace`")  # noqa: E501
        # verify the required parameter 'layer_name' is set
        if ('layer_name' not in params or
                params['layer_name'] is None):
            raise ValueError("Missing the required parameter `layer_name` when calling `delete_layer_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers/{layerName}.', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layer(self, qualified_layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layer(qualified_layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualified_layer_name: The name of the layer to retrieve, preferrably including namespace prefix (e.g. \"cite:roads\") to avoid ambiguities (required)
        :return: LayerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layer_with_http_info(qualified_layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layer_with_http_info(qualified_layer_name, **kwargs)  # noqa: E501
            return data

    def get_layer_with_http_info(self, qualified_layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layer_with_http_info(qualified_layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str qualified_layer_name: The name of the layer to retrieve, preferrably including namespace prefix (e.g. \"cite:roads\") to avoid ambiguities (required)
        :return: LayerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qualified_layer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qualified_layer_name' is set
        if ('qualified_layer_name' not in params or
                params['qualified_layer_name'] is None):
            raise ValueError("Missing the required parameter `qualified_layer_name` when calling `get_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qualified_layer_name' in params:
            path_params['qualifiedLayerName'] = params['qualified_layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/layers/{qualifiedLayerName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layer_by_workspace(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layer_by_workspace(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve, *without* workspace prefix, since it's given by the workspaceName parameter already. Request will fail otherwise. (required)
        :param bool quiet_on_not_found:
        :return: LayerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layer_by_workspace_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layer_by_workspace_with_http_info(workspace_name, layer_name, **kwargs)  # noqa: E501
            return data

    def get_layer_by_workspace_with_http_info(self, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Retrieve a layer  # noqa: E501

        Retrieves a single layer definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layer_by_workspace_with_http_info(workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve, *without* workspace prefix, since it's given by the workspaceName parameter already. Request will fail otherwise. (required)
        :param bool quiet_on_not_found:
        :return: LayerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'layer_name', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layer_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `get_layer_by_workspace`")  # noqa: E501
        # verify the required parameter 'layer_name' is set
        if ('layer_name' not in params or
                params['layer_name'] is None):
            raise ValueError("Missing the required parameter `layer_name` when calling `get_layer_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers/{layerName}.', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layers(self, **kwargs):  # noqa: E501
        """Get a list of layers  # noqa: E501

        Displays a list of all layers on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_layers_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of layers  # noqa: E501

        Displays a list of all layers on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/layers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layers_by_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """Get a list of layers in a workspace.  # noqa: E501

        Displays a list of all layers in the provided workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layers_by_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace to list layers in (required)
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layers_by_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layers_by_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501
            return data

    def get_layers_by_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """Get a list of layers in a workspace.  # noqa: E501

        Displays a list of all layers in the provided workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layers_by_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace to list layers in (required)
        :return: Layers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layers_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `get_layers_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_layer(self, body, qualified_layer_name, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_layer(body, qualified_layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LayerInfoWrapper body: The updated layer definition. (required)
        :param str qualified_layer_name: The name of the layer to retrieve, preferrably including namespace prefix (e.g. \"cite:roads\") to avoid ambiguities (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_layer_with_http_info(body, qualified_layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_layer_with_http_info(body, qualified_layer_name, **kwargs)  # noqa: E501
            return data

    def update_layer_with_http_info(self, body, qualified_layer_name, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_layer_with_http_info(body, qualified_layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LayerInfoWrapper body: The updated layer definition. (required)
        :param str qualified_layer_name: The name of the layer to retrieve, preferrably including namespace prefix (e.g. \"cite:roads\") to avoid ambiguities (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'qualified_layer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_layer`")  # noqa: E501
        # verify the required parameter 'qualified_layer_name' is set
        if ('qualified_layer_name' not in params or
                params['qualified_layer_name'] is None):
            raise ValueError("Missing the required parameter `qualified_layer_name` when calling `update_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qualified_layer_name' in params:
            path_params['qualifiedLayerName'] = params['qualified_layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/layers/{qualifiedLayerName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_layer_by_workspace(self, body, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_layer_by_workspace(body, workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LayerInfoWrapper body: The updated layer definition. (required)
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve, *without* workspace prefix, since it's given by the workspaceName parameter already. Request will fail otherwise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_layer_by_workspace_with_http_info(body, workspace_name, layer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_layer_by_workspace_with_http_info(body, workspace_name, layer_name, **kwargs)  # noqa: E501
            return data

    def update_layer_by_workspace_with_http_info(self, body, workspace_name, layer_name, **kwargs):  # noqa: E501
        """Modify a layer.  # noqa: E501

        Modifies an existing layer on the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_layer_by_workspace_with_http_info(body, workspace_name, layer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LayerInfoWrapper body: The updated layer definition. (required)
        :param str workspace_name: The name of the workspace the layer is in. (required)
        :param str layer_name: The name of the layer to retrieve, *without* workspace prefix, since it's given by the workspaceName parameter already. Request will fail otherwise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'layer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_layer_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_layer_by_workspace`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `update_layer_by_workspace`")  # noqa: E501
        # verify the required parameter 'layer_name' is set
        if ('layer_name' not in params or
                params['layer_name'] is None):
            raise ValueError("Missing the required parameter `layer_name` when calling `update_layer_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'layer_name' in params:
            path_params['layerName'] = params['layer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/layers/{layerName}.', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
