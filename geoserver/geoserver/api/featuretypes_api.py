# coding: utf-8

"""
    GeoServer Workspace

    A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from geoserver.api_client import ApiClient


class FeaturetypesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_feature_type(self, body, workspace_name, **kwargs):  # noqa: E501
        """create_feature_type  # noqa: E501

        Create a new feature type, the feature type definition needs to reference a store. Note -  when creating a new feature type via POST, if no underlying dataset with the specified name exists an attempt will be made to create it. This will work only in cases where the underlying data format supports the creation of new types (such as a database). When creating a feature type in this manner the client should include all attribute information in the feature type representation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_type(body, workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_feature_type_with_http_info(body, workspace_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_feature_type_with_http_info(body, workspace_name, **kwargs)  # noqa: E501
            return data

    def create_feature_type_with_http_info(self, body, workspace_name, **kwargs):  # noqa: E501
        """create_feature_type  # noqa: E501

        Create a new feature type, the feature type definition needs to reference a store. Note -  when creating a new feature type via POST, if no underlying dataset with the specified name exists an attempt will be made to create it. This will work only in cases where the underlying data format supports the creation of new types (such as a database). When creating a feature type in this manner the client should include all attribute information in the feature type representation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_type_with_http_info(body, workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_feature_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_feature_type`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `create_feature_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/featuretypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_feature_type_on_store(self, body, workspace_name, store_name, **kwargs):  # noqa: E501
        """create_feature_type_on_store  # noqa: E501

        Create a new feature type. Note -  when creating a new feature type via POST, if no underlying dataset with the specified name exists an attempt will be made to create it. This will work only in cases where the underlying data format supports the creation of new types (such as a database). When creating a feature type in this manner the client should include all attribute information in the feature type representation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_type_on_store(body, workspace_name, store_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_feature_type_on_store_with_http_info(body, workspace_name, store_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_feature_type_on_store_with_http_info(body, workspace_name, store_name, **kwargs)  # noqa: E501
            return data

    def create_feature_type_on_store_with_http_info(self, body, workspace_name, store_name, **kwargs):  # noqa: E501
        """create_feature_type_on_store  # noqa: E501

        Create a new feature type. Note -  when creating a new feature type via POST, if no underlying dataset with the specified name exists an attempt will be made to create it. This will work only in cases where the underlying data format supports the creation of new types (such as a database). When creating a feature type in this manner the client should include all attribute information in the feature type representation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_type_on_store_with_http_info(body, workspace_name, store_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'store_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_feature_type_on_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_feature_type_on_store`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `create_feature_type_on_store`")  # noqa: E501
        # verify the required parameter 'store_name' is set
        if ('store_name' not in params or
                params['store_name'] is None):
            raise ValueError("Missing the required parameter `store_name` when calling `create_feature_type_on_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'store_name' in params:
            path_params['storeName'] = params['store_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/datastores/{storeName}/featuretypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_feature_type(self, workspace_name, feature_type_name, **kwargs):  # noqa: E501
        """delete_feature_type  # noqa: E501

        Delete a feature type in the default data store for the workspace (optionally recursively deleting layers).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_type(workspace_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified featuretype. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the featuretype.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_feature_type_with_http_info(workspace_name, feature_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_feature_type_with_http_info(workspace_name, feature_type_name, **kwargs)  # noqa: E501
            return data

    def delete_feature_type_with_http_info(self, workspace_name, feature_type_name, **kwargs):  # noqa: E501
        """delete_feature_type  # noqa: E501

        Delete a feature type in the default data store for the workspace (optionally recursively deleting layers).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_type_with_http_info(workspace_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified featuretype. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the featuretype.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'feature_type_name', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `delete_feature_type`")  # noqa: E501
        # verify the required parameter 'feature_type_name' is set
        if ('feature_type_name' not in params or
                params['feature_type_name'] is None):
            raise ValueError("Missing the required parameter `feature_type_name` when calling `delete_feature_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'feature_type_name' in params:
            path_params['featureTypeName'] = params['feature_type_name']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/featuretypes/{featureTypeName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_feature_type_by_store(self, workspace_name, store_name, feature_type_name, **kwargs):  # noqa: E501
        """delete_feature_type_by_store  # noqa: E501

        Delete a feature type (optionally recursively deleting layers).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_type_by_store(workspace_name, store_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified featuretype. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the featuretype.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_feature_type_by_store_with_http_info(workspace_name, store_name, feature_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_feature_type_by_store_with_http_info(workspace_name, store_name, feature_type_name, **kwargs)  # noqa: E501
            return data

    def delete_feature_type_by_store_with_http_info(self, workspace_name, store_name, feature_type_name, **kwargs):  # noqa: E501
        """delete_feature_type_by_store  # noqa: E501

        Delete a feature type (optionally recursively deleting layers).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_type_by_store_with_http_info(workspace_name, store_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool recurse: Recursively deletes all layers referenced by the specified featuretype. Allowed values for this parameter are true or false. The default value is false. A request with 'recurse=false' will fail if any layers reference the featuretype.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'store_name', 'feature_type_name', 'recurse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature_type_by_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `delete_feature_type_by_store`")  # noqa: E501
        # verify the required parameter 'store_name' is set
        if ('store_name' not in params or
                params['store_name'] is None):
            raise ValueError("Missing the required parameter `store_name` when calling `delete_feature_type_by_store`")  # noqa: E501
        # verify the required parameter 'feature_type_name' is set
        if ('feature_type_name' not in params or
                params['feature_type_name'] is None):
            raise ValueError("Missing the required parameter `feature_type_name` when calling `delete_feature_type_by_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'store_name' in params:
            path_params['storeName'] = params['store_name']  # noqa: E501
        if 'feature_type_name' in params:
            path_params['featureTypeName'] = params['feature_type_name']  # noqa: E501

        query_params = []
        if 'recurse' in params:
            query_params.append(('recurse', params['recurse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/datastores/{storeName}/featuretypes/{featureTypeName}.', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_type(self, workspace_name, store_name, feature_type_name, **kwargs):  # noqa: E501
        """get_feature_type  # noqa: E501

        Get an individual feature type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_type(workspace_name, store_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool quiet_on_not_found: Prevents logging an Exception when the feature type is not present. Note that 404 status code will be returned anyway. Defaults to \"false\".
        :return: FeatureTypeResponseWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_type_with_http_info(workspace_name, store_name, feature_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_type_with_http_info(workspace_name, store_name, feature_type_name, **kwargs)  # noqa: E501
            return data

    def get_feature_type_with_http_info(self, workspace_name, store_name, feature_type_name, **kwargs):  # noqa: E501
        """get_feature_type  # noqa: E501

        Get an individual feature type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_type_with_http_info(workspace_name, store_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool quiet_on_not_found: Prevents logging an Exception when the feature type is not present. Note that 404 status code will be returned anyway. Defaults to \"false\".
        :return: FeatureTypeResponseWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'store_name', 'feature_type_name', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `get_feature_type`")  # noqa: E501
        # verify the required parameter 'store_name' is set
        if ('store_name' not in params or
                params['store_name'] is None):
            raise ValueError("Missing the required parameter `store_name` when calling `get_feature_type`")  # noqa: E501
        # verify the required parameter 'feature_type_name' is set
        if ('feature_type_name' not in params or
                params['feature_type_name'] is None):
            raise ValueError("Missing the required parameter `feature_type_name` when calling `get_feature_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'store_name' in params:
            path_params['storeName'] = params['store_name']  # noqa: E501
        if 'feature_type_name' in params:
            path_params['featureTypeName'] = params['feature_type_name']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/datastores/{storeName}/featuretypes/{featureTypeName}.', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureTypeResponseWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_type_by_default_store(self, workspace_name, feature_type_name, **kwargs):  # noqa: E501
        """get_feature_type_by_default_store  # noqa: E501

        Get an individual feature type in the default data store for the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_type_by_default_store(workspace_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool quiet_on_not_found: Prevents logging an Exception when the feature type is not present. Note that 404 status code will be returned anyway. Defaults to \"false\".
        :return: FeatureTypeResponseWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_type_by_default_store_with_http_info(workspace_name, feature_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_type_by_default_store_with_http_info(workspace_name, feature_type_name, **kwargs)  # noqa: E501
            return data

    def get_feature_type_by_default_store_with_http_info(self, workspace_name, feature_type_name, **kwargs):  # noqa: E501
        """get_feature_type_by_default_store  # noqa: E501

        Get an individual feature type in the default data store for the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_type_by_default_store_with_http_info(workspace_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str feature_type_name: The name of the feature type (required)
        :param bool quiet_on_not_found: Prevents logging an Exception when the feature type is not present. Note that 404 status code will be returned anyway. Defaults to \"false\".
        :return: FeatureTypeResponseWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'feature_type_name', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_type_by_default_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `get_feature_type_by_default_store`")  # noqa: E501
        # verify the required parameter 'feature_type_name' is set
        if ('feature_type_name' not in params or
                params['feature_type_name'] is None):
            raise ValueError("Missing the required parameter `feature_type_name` when calling `get_feature_type_by_default_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'feature_type_name' in params:
            path_params['featureTypeName'] = params['feature_type_name']  # noqa: E501

        query_params = []
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/featuretypes/{featureTypeName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureTypeResponseWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_types_by_store(self, workspace_name, store_name, **kwargs):  # noqa: E501
        """get_feature_types_by_store  # noqa: E501

        Get a list of feature types for the workspace and datastore.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_types_by_store(workspace_name, store_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str list: The list parameter is used to control the category of feature types that are returned. Must be one of \"configured\", \"available\", \"available_with_geom\", \"all\" 
        :param bool quiet_on_not_found:
        :return: FeatureTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_types_by_store_with_http_info(workspace_name, store_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_types_by_store_with_http_info(workspace_name, store_name, **kwargs)  # noqa: E501
            return data

    def get_feature_types_by_store_with_http_info(self, workspace_name, store_name, **kwargs):  # noqa: E501
        """get_feature_types_by_store  # noqa: E501

        Get a list of feature types for the workspace and datastore.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_types_by_store_with_http_info(workspace_name, store_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str list: The list parameter is used to control the category of feature types that are returned. Must be one of \"configured\", \"available\", \"available_with_geom\", \"all\" 
        :param bool quiet_on_not_found:
        :return: FeatureTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'store_name', 'list', 'quiet_on_not_found']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_types_by_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `get_feature_types_by_store`")  # noqa: E501
        # verify the required parameter 'store_name' is set
        if ('store_name' not in params or
                params['store_name'] is None):
            raise ValueError("Missing the required parameter `store_name` when calling `get_feature_types_by_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'store_name' in params:
            path_params['storeName'] = params['store_name']  # noqa: E501

        query_params = []
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501
        if 'quiet_on_not_found' in params:
            query_params.append(('quietOnNotFound', params['quiet_on_not_found']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/datastores/{storeName}/featuretypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureTypeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_types_by_workspace(self, workspace_name, **kwargs):  # noqa: E501
        """get_feature_types_by_workspace  # noqa: E501

        Get a list of all feature types for all datastors in the workspace.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_types_by_workspace(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str list: The list parameter is used to control the category of feature types that are returned. Must be one of \"configured\", \"available\", \"available_with_geom\", \"all\" 
        :return: FeatureTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_types_by_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_types_by_workspace_with_http_info(workspace_name, **kwargs)  # noqa: E501
            return data

    def get_feature_types_by_workspace_with_http_info(self, workspace_name, **kwargs):  # noqa: E501
        """get_feature_types_by_workspace  # noqa: E501

        Get a list of all feature types for all datastors in the workspace.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_types_by_workspace_with_http_info(workspace_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_name: The name of the workspace (required)
        :param str list: The list parameter is used to control the category of feature types that are returned. Must be one of \"configured\", \"available\", \"available_with_geom\", \"all\" 
        :return: FeatureTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_name', 'list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_types_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `get_feature_types_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501

        query_params = []
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/featuretypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureTypeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_feature_type(self, body, workspace_name, feature_type_name, **kwargs):  # noqa: E501
        """modify_feature_type  # noqa: E501

        Update an individual feature type in the default data store for the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_feature_type(body, workspace_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :param str feature_type_name: The name of the feature type (required)
        :param list[str] recalculate: Specifies whether to recalculate any bounding boxes for a feature type. Some properties of feature types are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_feature_type_with_http_info(body, workspace_name, feature_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_feature_type_with_http_info(body, workspace_name, feature_type_name, **kwargs)  # noqa: E501
            return data

    def modify_feature_type_with_http_info(self, body, workspace_name, feature_type_name, **kwargs):  # noqa: E501
        """modify_feature_type  # noqa: E501

        Update an individual feature type in the default data store for the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_feature_type_with_http_info(body, workspace_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :param str feature_type_name: The name of the feature type (required)
        :param list[str] recalculate: Specifies whether to recalculate any bounding boxes for a feature type. Some properties of feature types are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'feature_type_name', 'recalculate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_feature_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_feature_type`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `modify_feature_type`")  # noqa: E501
        # verify the required parameter 'feature_type_name' is set
        if ('feature_type_name' not in params or
                params['feature_type_name'] is None):
            raise ValueError("Missing the required parameter `feature_type_name` when calling `modify_feature_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'feature_type_name' in params:
            path_params['featureTypeName'] = params['feature_type_name']  # noqa: E501

        query_params = []
        if 'recalculate' in params:
            query_params.append(('recalculate', params['recalculate']))  # noqa: E501
            collection_formats['recalculate'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/featuretypes/{featureTypeName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_feature_type_by_store(self, body, workspace_name, store_name, feature_type_name, **kwargs):  # noqa: E501
        """modify_feature_type_by_store  # noqa: E501

        Update an individual feature type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_feature_type_by_store(body, workspace_name, store_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str feature_type_name: The name of the feature type (required)
        :param list[str] recalculate: Specifies whether to recalculate any bounding boxes for a feature type. Some properties of feature types are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_feature_type_by_store_with_http_info(body, workspace_name, store_name, feature_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_feature_type_by_store_with_http_info(body, workspace_name, store_name, feature_type_name, **kwargs)  # noqa: E501
            return data

    def modify_feature_type_by_store_with_http_info(self, body, workspace_name, store_name, feature_type_name, **kwargs):  # noqa: E501
        """modify_feature_type_by_store  # noqa: E501

        Update an individual feature type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_feature_type_by_store_with_http_info(body, workspace_name, store_name, feature_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTypeInfoWrapper body: The body of the feature type to POST (required)
        :param str workspace_name: The name of the workspace (required)
        :param str store_name: The name of the datastore (required)
        :param str feature_type_name: The name of the feature type (required)
        :param list[str] recalculate: Specifies whether to recalculate any bounding boxes for a feature type. Some properties of feature types are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter 'recalculate=' is useful avoid slow recalculation when operating against large datasets as 'recalculate=' avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter 'recalculate=nativebbox' is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - 'recalculate=nativebbox,latlonbbox' can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_name', 'store_name', 'feature_type_name', 'recalculate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_feature_type_by_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_feature_type_by_store`")  # noqa: E501
        # verify the required parameter 'workspace_name' is set
        if ('workspace_name' not in params or
                params['workspace_name'] is None):
            raise ValueError("Missing the required parameter `workspace_name` when calling `modify_feature_type_by_store`")  # noqa: E501
        # verify the required parameter 'store_name' is set
        if ('store_name' not in params or
                params['store_name'] is None):
            raise ValueError("Missing the required parameter `store_name` when calling `modify_feature_type_by_store`")  # noqa: E501
        # verify the required parameter 'feature_type_name' is set
        if ('feature_type_name' not in params or
                params['feature_type_name'] is None):
            raise ValueError("Missing the required parameter `feature_type_name` when calling `modify_feature_type_by_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_name' in params:
            path_params['workspaceName'] = params['workspace_name']  # noqa: E501
        if 'store_name' in params:
            path_params['storeName'] = params['store_name']  # noqa: E501
        if 'feature_type_name' in params:
            path_params['featureTypeName'] = params['feature_type_name']  # noqa: E501

        query_params = []
        if 'recalculate' in params:
            query_params.append(('recalculate', params['recalculate']))  # noqa: E501
            collection_formats['recalculate'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspaceName}/datastores/{storeName}/featuretypes/{featureTypeName}.', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
